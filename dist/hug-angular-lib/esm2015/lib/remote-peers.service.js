import { Stream } from './stream';
import { Peer } from './peer';
import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "./log.service";
export class RemotePeersService {
    constructor(logger) {
        this.logger = logger;
        this._remotePeers = new BehaviorSubject([]);
        this.peers = [];
        this.remotePeers = this._remotePeers.asObservable();
    }
    updatePeers() {
        setTimeout(() => this._remotePeers.next(this.peers), 0);
    }
    clearPeers() {
        this._remotePeers = new BehaviorSubject([]);
        this.remotePeers = this._remotePeers.asObservable();
        this.peers = [];
    }
    newPeer(id) {
        this.logger.debug('New peer', id);
        const peer = new Peer();
        peer.id = id;
        peer.streams = [];
        this.addPeer(peer);
        this.updatePeers();
        return peer;
    }
    closePeer(id) {
        this.logger.debug('room "peerClosed" event [peerId:%o]', id);
        this.peers = this.peers.filter((peer) => peer.id !== id);
        this.updatePeers();
    }
    addPeer(peer) {
        this.peers.push(peer);
    }
    addPeers(peers) {
        this.logger.debug('Add peers ', peers);
        for (const peer of peers) {
            if (!this.peers.find(p => peer.id === p.id)) {
                this.logger.debug('adding peer [peerId: "%s"]', peer.id);
                this.peers.push({ id: peer.id, streams: [] });
            }
        }
        this.updatePeers();
    }
    newConsumer(consumer, peerId, type, producerPaused) {
        this.logger.debug('remote peers New consumer', consumer, peerId);
        let peer = this.peers.find(peer => peer.id === peerId);
        if (!peer) {
            this.logger.warn('Couldn\'t find peer', peerId, this.peers);
            peer = this.newPeer(peerId);
        }
        const existingStream = peer.streams.find(stream => { var _a; return ((_a = stream.consumer) === null || _a === void 0 ? void 0 : _a.appData.source) === consumer.appData.source; });
        if (existingStream) {
            existingStream.setConsumer(consumer);
        }
        else {
            const stream = new Stream();
            stream.peer = peer;
            stream.type = type;
            stream.producerPaused = producerPaused;
            stream.setConsumer(consumer);
            this.logger.debug('New stream created ', stream);
            peer.streams.push(stream);
        }
        this.updatePeers();
    }
    onConsumerLayerChanged(consumerId) {
        const stream = this.getStreamByConsumerId(consumerId);
        if (stream) {
            stream.consumerLayerChanged();
        }
    }
    getStreamByConsumerId(consumerId) {
        for (const peer of this.peers) {
            const stream = peer.streams.find(s => s.consumer.id === consumerId);
            if (stream) {
                return stream;
            }
        }
        return null;
    }
}
RemotePeersService.ɵfac = function RemotePeersService_Factory(t) { return new (t || RemotePeersService)(i0.ɵɵinject(i1.LogService)); };
RemotePeersService.ɵprov = i0.ɵɵdefineInjectable({ token: RemotePeersService, factory: RemotePeersService.ɵfac, providedIn: 'root' });
/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(RemotePeersService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: i1.LogService }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,