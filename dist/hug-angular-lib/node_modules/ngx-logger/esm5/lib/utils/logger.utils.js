/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { DEFAULT_COLOR_SCHEME } from '../resources/color-schemes';
import { NgxLoggerLevel } from '../types/logger-level.enum';
var NGXLoggerUtils = /** @class */ (function () {
    function NGXLoggerUtils() {
    }
    /**
     * @param {?} timestamp
     * @param {?} logLevel
     * @param {?} fileName
     * @param {?} lineNumber
     * @return {?}
     */
    NGXLoggerUtils.prepareMetaString = /**
     * @param {?} timestamp
     * @param {?} logLevel
     * @param {?} fileName
     * @param {?} lineNumber
     * @return {?}
     */
    function (timestamp, logLevel, fileName, lineNumber) {
        /** @type {?} */
        var fileDetails = fileName ? " [" + fileName + ":" + lineNumber + "]" : '';
        return timestamp + " " + logLevel + fileDetails;
    };
    /**
     * @param {?} level
     * @param {?=} configColorScheme
     * @return {?}
     */
    NGXLoggerUtils.getColor = /**
     * @param {?} level
     * @param {?=} configColorScheme
     * @return {?}
     */
    function (level, configColorScheme) {
        switch (level) {
            case NgxLoggerLevel.TRACE:
                return this.getColorFromConfig(NgxLoggerLevel.TRACE, configColorScheme);
            case NgxLoggerLevel.DEBUG:
                return this.getColorFromConfig(NgxLoggerLevel.DEBUG, configColorScheme);
            case NgxLoggerLevel.INFO:
                return this.getColorFromConfig(NgxLoggerLevel.INFO, configColorScheme);
            case NgxLoggerLevel.LOG:
                return this.getColorFromConfig(NgxLoggerLevel.INFO, configColorScheme);
            case NgxLoggerLevel.WARN:
                return this.getColorFromConfig(NgxLoggerLevel.FATAL, configColorScheme);
            case NgxLoggerLevel.ERROR:
                return this.getColorFromConfig(NgxLoggerLevel.FATAL, configColorScheme);
            case NgxLoggerLevel.FATAL:
                return this.getColorFromConfig(NgxLoggerLevel.FATAL, configColorScheme);
            case NgxLoggerLevel.OFF:
            default:
                return;
        }
    };
    /**
     * @private
     * @param {?} level
     * @param {?} configColorScheme
     * @return {?}
     */
    NGXLoggerUtils.getColorFromConfig = /**
     * @private
     * @param {?} level
     * @param {?} configColorScheme
     * @return {?}
     */
    function (level, configColorScheme) {
        if (!configColorScheme) {
            return DEFAULT_COLOR_SCHEME[level];
        }
        return configColorScheme[level];
    };
    /**
     *  This allows us to see who called the logger
     */
    /**
     *  This allows us to see who called the logger
     * @return {?}
     */
    NGXLoggerUtils.getCallerDetails = /**
     *  This allows us to see who called the logger
     * @return {?}
     */
    function () {
        /** @type {?} */
        var err = (new Error(''));
        try {
            // this should produce the line which NGX Logger was called
            /** @type {?} */
            var callerLine = err.stack.split('\n')[4].split('/');
            // returns the file:lineNumber
            /** @type {?} */
            var fileLineNumber = callerLine[callerLine.length - 1].replace(/[)]/g, '').split(':');
            return {
                fileName: fileLineNumber[0],
                lineNumber: fileLineNumber[1]
            };
        }
        catch (e) {
            return {
                fileName: null,
                lineNumber: null
            };
        }
    };
    /**
     * @param {?} message
     * @return {?}
     */
    NGXLoggerUtils.prepareMessage = /**
     * @param {?} message
     * @return {?}
     */
    function (message) {
        try {
            if (typeof message !== 'string' && !(message instanceof Error)) {
                message = JSON.stringify(message, null, 2);
            }
        }
        catch (e) {
            // additional = [message, ...additional];
            message = 'The provided "message" value could not be parsed with JSON.stringify().';
        }
        return message;
    };
    /**
     * @param {?} additional
     * @return {?}
     */
    NGXLoggerUtils.prepareAdditionalParameters = /**
     * @param {?} additional
     * @return {?}
     */
    function (additional) {
        if (additional === null || additional === undefined) {
            return null;
        }
        return additional.map((/**
         * @param {?} next
         * @param {?} idx
         * @return {?}
         */
        function (next, idx) {
            try {
                // We just want to make sure the JSON can be parsed, we do not want to actually change the type
                if (typeof next === 'object') {
                    JSON.stringify(next);
                }
                return next;
            }
            catch (e) {
                return "The additional[" + idx + "] value could not be parsed using JSON.stringify().";
            }
        }));
    };
    return NGXLoggerUtils;
}());
export { NGXLoggerUtils };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2VyLnV0aWxzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWxvZ2dlci8iLCJzb3VyY2VzIjpbImxpYi91dGlscy9sb2dnZXIudXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyxvQkFBb0IsRUFBQyxNQUFNLDRCQUE0QixDQUFDO0FBQ2hFLE9BQU8sRUFBQyxjQUFjLEVBQUMsTUFBTSw0QkFBNEIsQ0FBQztBQUUxRDtJQUFBO0lBZ0dBLENBQUM7Ozs7Ozs7O0lBOUZRLGdDQUFpQjs7Ozs7OztJQUF4QixVQUF5QixTQUFpQixFQUFFLFFBQWdCLEVBQUUsUUFBZ0IsRUFBRSxVQUFrQjs7WUFDMUYsV0FBVyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsT0FBSyxRQUFRLFNBQUksVUFBVSxNQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUU7UUFFbEUsT0FBVSxTQUFTLFNBQUksUUFBUSxHQUFHLFdBQWEsQ0FBQztJQUNsRCxDQUFDOzs7Ozs7SUFFTSx1QkFBUTs7Ozs7SUFBZixVQUFnQixLQUFxQixFQUFFLGlCQUFpQztRQUN0RSxRQUFRLEtBQUssRUFBRTtZQUNiLEtBQUssY0FBYyxDQUFDLEtBQUs7Z0JBQ3ZCLE9BQU8sSUFBSSxDQUFDLGtCQUFrQixDQUFDLGNBQWMsQ0FBQyxLQUFLLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztZQUMxRSxLQUFLLGNBQWMsQ0FBQyxLQUFLO2dCQUN2QixPQUFPLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxjQUFjLENBQUMsS0FBSyxFQUFFLGlCQUFpQixDQUFDLENBQUM7WUFDMUUsS0FBSyxjQUFjLENBQUMsSUFBSTtnQkFDdEIsT0FBTyxJQUFJLENBQUMsa0JBQWtCLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO1lBQ3pFLEtBQUssY0FBYyxDQUFDLEdBQUc7Z0JBQ3JCLE9BQU8sSUFBSSxDQUFDLGtCQUFrQixDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsaUJB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b3J0IHtERUZBVUxUX0NPTE9SX1NDSEVNRX0gZnJvbSAnLi4vcmVzb3VyY2VzL2NvbG9yLXNjaGVtZXMnO1xuaW1wb3J0IHtOZ3hMb2dnZXJMZXZlbH0gZnJvbSAnLi4vdHlwZXMvbG9nZ2VyLWxldmVsLmVudW0nO1xuXG5leHBvcnQgY2xhc3MgTkdYTG9nZ2VyVXRpbHMge1xuXG4gIHN0YXRpYyBwcmVwYXJlTWV0YVN0cmluZyh0aW1lc3RhbXA6IHN0cmluZywgbG9nTGV2ZWw6IHN0cmluZywgZmlsZU5hbWU6IHN0cmluZywgbGluZU51bWJlcjogc3RyaW5nKSB7XG4gICAgY29uc3QgZmlsZURldGFpbHMgPSBmaWxlTmFtZSA/IGAgWyR7ZmlsZU5hbWV9OiR7bGluZU51bWJlcn1dYCA6ICcnO1xuXG4gICAgcmV0dXJuIGAke3RpbWVzdGFtcH0gJHtsb2dMZXZlbH0ke2ZpbGVEZXRhaWxzfWA7XG4gIH1cblxuICBzdGF0aWMgZ2V0Q29sb3IobGV2ZWw6IE5neExvZ2dlckxldmVsLCBjb25maWdDb2xvclNjaGVtZT86IEFycmF5PHN0cmluZz4pOiBzdHJpbmcgfCB1bmRlZmluZWQge1xuICAgIHN3aXRjaCAobGV2ZWwpIHtcbiAgICAgIGNhc2UgTmd4TG9nZ2VyTGV2ZWwuVFJBQ0U6XG4gICAgICAgIHJldHVybiB0aGlzLmdldENvbG9yRnJvbUNvbmZpZyhOZ3hMb2dnZXJMZXZlbC5UUkFDRSwgY29uZmlnQ29sb3JTY2hlbWUpO1xuICAgICAgY2FzZSBOZ3hMb2dnZXJMZXZlbC5ERUJVRzpcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Q29sb3JGcm9tQ29uZmlnKE5neExvZ2dlckxldmVsLkRFQlVHLCBjb25maWdDb2xvclNjaGVtZSk7XG4gICAgICBjYXNlIE5neExvZ2dlckxldmVsLklORk86XG4gICAgICAgIHJldHVybiB0aGlzLmdldENvbG9yRnJvbUNvbmZpZyhOZ3hMb2dnZXJMZXZlbC5JTkZPLCBjb25maWdDb2xvclNjaGVtZSk7XG4gICAgICBjYXNlIE5neExvZ2dlckxldmVsLkxPRzpcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Q29sb3JGcm9tQ29uZmlnKE5neExvZ2dlckxldmVsLklORk8sIGNvbmZpZ0NvbG9yU2NoZW1lKTtcbiAgICAgIGNhc2UgTmd4TG9nZ2VyTGV2ZWwuV0FSTjpcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Q29sb3JGcm9tQ29uZmlnKE5neExvZ2dlckxldmVsLkZBVEFMLCBjb25maWdDb2xvclNjaGVtZSk7XG4gICAgICBjYXNlIE5neExvZ2dlckxldmVsLkVSUk9SOlxuICAgICAgICByZXR1cm4gdGhpcy5nZXRDb2xvckZyb21Db25maWcoTmd4TG9nZ2VyTGV2ZWwuRkFUQUwsIGNvbmZpZ0NvbG9yU2NoZW1lKTtcbiAgICAgIGNhc2UgTmd4TG9nZ2VyTGV2ZWwuRkFUQUw6XG4gICAgICAgIHJldHVybiB0aGlzLmdldENvbG9yRnJvbUNvbmZpZyhOZ3hMb2dnZXJMZXZlbC5GQVRBTCwgY29uZmlnQ29sb3JTY2hlbWUpO1xuICAgICAgY2FzZSBOZ3hMb2dnZXJMZXZlbC5PRkY6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm47XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBzdGF0aWMgZ2V0Q29sb3JGcm9tQ29uZmlnKGxldmVsOiBudW1iZXIsIGNvbmZpZ0NvbG9yU2NoZW1lOiBBcnJheTxzdHJpbmc+KTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcbiAgICBpZiAoIWNvbmZpZ0NvbG9yU2NoZW1lKSB7XG4gICAgICByZXR1cm4gREVGQVVMVF9DT0xPUl9TQ0hFTUVbbGV2ZWxdO1xuICAgIH1cblxuICAgIHJldHVybiBjb25maWdDb2xvclNjaGVtZVtsZXZlbF07XG4gIH1cblxuICAvKipcbiAgICogIFRoaXMgYWxsb3dzIHVzIHRvIHNlZSB3aG8gY2FsbGVkIHRoZSBsb2dnZXJcbiAgICovXG4gIHN0YXRpYyBnZXRDYWxsZXJEZXRhaWxzKCk6IHsgbGluZU51bWJlcjogc3RyaW5nLCBmaWxlTmFtZTogc3RyaW5nIH0ge1xuICAgIGNvbnN0IGVyciA9IChuZXcgRXJyb3IoJycpKTtcblxuICAgIHRyeSB7XG4gICAgICAvLyB0aGlzIHNob3VsZCBwcm9kdWNlIHRoZSBsaW5lIHdoaWNoIE5HWCBMb2dnZXIgd2FzIGNhbGxlZFxuICAgICAgY29uc3QgY2FsbGVyTGluZSA9IGVyci5zdGFjay5zcGxpdCgnXFxuJylbNF0uc3BsaXQoJy8nKTtcblxuICAgICAgLy8gcmV0dXJucyB0aGUgZmlsZTpsaW5lTnVtYmVyXG4gICAgICBjb25zdCBmaWxlTGluZU51bWJlciA9IGNhbGxlckxpbmVbY2FsbGVyTGluZS5sZW5ndGggLSAxXS5yZXBsYWNlKC9bKV0vZywgJycpLnNwbGl0KCc6Jyk7XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGZpbGVOYW1lOiBmaWxlTGluZU51bWJlclswXSxcbiAgICAgICAgbGluZU51bWJlcjogZmlsZUxpbmVOdW1iZXJbMV1cbiAgICAgIH07XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZmlsZU5hbWU6IG51bGwsXG4gICAgICAgIGxpbmVOdW1iZXI6IG51bGxcbiAgICAgIH07XG4gICAgfVxuXG4gIH1cblxuICBzdGF0aWMgcHJlcGFyZU1lc3NhZ2UobWVzc2FnZSkge1xuICAgIHRyeSB7XG4gICAgICBpZiAodHlwZW9mIG1lc3NhZ2UgIT09ICdzdHJpbmcnICYmICEobWVzc2FnZSBpbnN0YW5jZW9mIEVycm9yKSkge1xuICAgICAgICBtZXNzYWdlID0gSlNPTi5zdHJpbmdpZnkobWVzc2FnZSwgbnVsbCwgMik7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gYWRkaXRpb25hbCA9IFttZXNzYWdlLCAuLi5hZGRpdGlvbmFsXTtcbiAgICAgIG1lc3NhZ2UgPSAnVGhlIHByb3ZpZGVkIFwibWVzc2FnZVwiIHZhbHVlIGNvdWxkIG5vdCBiZSBwYXJzZWQgd2l0aCBKU09OLnN0cmluZ2lmeSgpLic7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lc3NhZ2U7XG4gIH1cblxuICBzdGF0aWMgcHJlcGFyZUFkZGl0aW9uYWxQYXJhbWV0ZXJzKGFkZGl0aW9uYWw6IGFueVtdKSB7XG4gICAgaWYgKGFkZGl0aW9uYWwgPT09IG51bGwgfHwgYWRkaXRpb25hbCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gYWRkaXRpb25hbC5tYXAoKG5leHQsIGlkeCkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gV2UganVzdCB3YW50IHRvIG1ha2Ugc3VyZSB0aGUgSlNPTiBjYW4gYmUgcGFyc2VkLCB3ZSBkbyBub3Qgd2FudCB0byBhY3R1YWxseSBjaGFuZ2UgdGhlIHR5cGVcbiAgICAgICAgaWYgKHR5cGVvZiBuZXh0ID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgIEpTT04uc3RyaW5naWZ5KG5leHQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBgVGhlIGFkZGl0aW9uYWxbJHtpZHh9XSB2YWx1ZSBjb3VsZCBub3QgYmUgcGFyc2VkIHVzaW5nIEpTT04uc3RyaW5naWZ5KCkuYDtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG59XG4iXX0=