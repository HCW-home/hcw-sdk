/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpBackend, HttpRequest, HttpResponse } from '@angular/common/http';
import { filter, map } from 'rxjs/operators';
var NGXLoggerHttpService = /** @class */ (function () {
    function NGXLoggerHttpService(httpBackend) {
        this.httpBackend = httpBackend;
    }
    /**
     * @param {?} url
     * @param {?} log
     * @param {?} options
     * @return {?}
     */
    NGXLoggerHttpService.prototype.logOnServer = /**
     * @param {?} url
     * @param {?} log
     * @param {?} options
     * @return {?}
     */
    function (url, log, options) {
        // HttpBackend skips all HttpInterceptors
        // They may log errors using this service causing circular calls
        /** @type {?} */
        var req = new HttpRequest('POST', url, log, options || {});
        return this.httpBackend.handle(req).pipe(filter((/**
         * @param {?} e
         * @return {?}
         */
        function (e) { return e instanceof HttpResponse; })), map((/**
         * @param {?} httpResponse
         * @return {?}
         */
        function (httpResponse) { return httpResponse.body; })));
    };
    NGXLoggerHttpService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    NGXLoggerHttpService.ctorParameters = function () { return [
        { type: HttpBackend }
    ]; };
    return NGXLoggerHttpService;
}());
export { NGXLoggerHttpService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    NGXLoggerHttpService.prototype.httpBackend;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWxvZ2dlci8iLCJzb3VyY2VzIjpbImxpYi9odHRwLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFDLFdBQVcsRUFBRSxXQUFXLEVBQUUsWUFBWSxFQUFDLE1BQU0sc0JBQXNCLENBQUM7QUFFNUUsT0FBTyxFQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUszQztJQUVFLDhCQUE2QixXQUF3QjtRQUF4QixnQkFBVyxHQUFYLFdBQVcsQ0FBYTtJQUFJLENBQUM7Ozs7Ozs7SUFFMUQsMENBQVc7Ozs7OztJQUFYLFVBQVksR0FBVyxFQUFFLEdBQW9CLEVBQUUsT0FBZTs7OztZQUd0RCxHQUFHLEdBQUcsSUFBSSxXQUFXLENBQU0sTUFBTSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsT0FBTyxJQUFJLEVBQUUsQ0FBQztRQUNqRSxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FDdEMsTUFBTTs7OztRQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsQ0FBQyxZQUFZLFlBQVksRUFBekIsQ0FBeUIsRUFBQyxFQUN0QyxHQUFHOzs7O1FBQXlCLFVBQUMsWUFBK0IsSUFBSyxPQUFBLFlBQVksQ0FBQyxJQUFJLEVBQWpCLENBQWlCLEVBQUMsQ0FDcEYsQ0FBQztJQUNKLENBQUM7O2dCQVpGLFVBQVU7Ozs7Z0JBUEgsV0FBVzs7SUFxQm5CLDJCQUFDO0NBQUEsQUFkRCxJQWNDO1NBYlksb0JBQW9COzs7Ozs7SUFDbkIsMkNBQXlDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtIdHRwQmFja2VuZCwgSHR0cFJlcXVlc3QsIEh0dHBSZXNwb25zZX0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtmaWx0ZXIsIG1hcH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgTkdYTG9nSW50ZXJmYWNlIH0gZnJvbSAnLi90eXBlcy9uZ3gtbG9nLmludGVyZmFjZSc7XG5cblxuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgTkdYTG9nZ2VySHR0cFNlcnZpY2Uge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IGh0dHBCYWNrZW5kOiBIdHRwQmFja2VuZCkgeyB9XG5cbiAgbG9nT25TZXJ2ZXIodXJsOiBzdHJpbmcsIGxvZzogTkdYTG9nSW50ZXJmYWNlLCBvcHRpb25zOiBvYmplY3QpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIC8vIEh0dHBCYWNrZW5kIHNraXBzIGFsbCBIdHRwSW50ZXJjZXB0b3JzXG4gICAgLy8gVGhleSBtYXkgbG9nIGVycm9ycyB1c2luZyB0aGlzIHNlcnZpY2UgY2F1c2luZyBjaXJjdWxhciBjYWxsc1xuICAgIGNvbnN0IHJlcSA9IG5ldyBIdHRwUmVxdWVzdDxhbnk+KCdQT1NUJywgdXJsLCBsb2csIG9wdGlvbnMgfHwge30pO1xuICAgIHJldHVybiB0aGlzLmh0dHBCYWNrZW5kLmhhbmRsZShyZXEpLnBpcGUoXG4gICAgICBmaWx0ZXIoZSA9PiBlIGluc3RhbmNlb2YgSHR0cFJlc3BvbnNlKSxcbiAgICAgIG1hcDxIdHRwUmVzcG9uc2U8YW55PiwgYW55PigoaHR0cFJlc3BvbnNlOiBIdHRwUmVzcG9uc2U8YW55PikgPT4gaHR0cFJlc3BvbnNlLmJvZHkpXG4gICAgKTtcbiAgfVxuXG59XG4iXX0=