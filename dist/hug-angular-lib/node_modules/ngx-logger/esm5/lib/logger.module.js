/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { CommonModule, DatePipe } from '@angular/common';
import { NgModule } from '@angular/core';
import { NGXLogger } from './logger.service';
import { LoggerConfig } from './logger.config';
import { CustomNGXLoggerService } from './custom-logger.service';
import { NGXLoggerHttpService } from './http.service';
import { NGXMapperService } from './mapper.service';
var LoggerModule = /** @class */ (function () {
    function LoggerModule() {
    }
    /**
     * @param {?} config
     * @return {?}
     */
    LoggerModule.forRoot = /**
     * @param {?} config
     * @return {?}
     */
    function (config) {
        return {
            ngModule: LoggerModule,
            providers: [
                { provide: LoggerConfig, useValue: config || {} },
                NGXLogger,
                NGXLoggerHttpService,
                CustomNGXLoggerService,
                NGXMapperService
            ]
        };
    };
    /**
     * @return {?}
     */
    LoggerModule.forChild = /**
     * @return {?}
     */
    function () {
        return {
            ngModule: LoggerModule,
            providers: [
                NGXLogger,
                NGXLoggerHttpService,
                CustomNGXLoggerService,
                NGXMapperService
            ]
        };
    };
    LoggerModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule
                    ],
                    providers: [
                        NGXLogger,
                        NGXLoggerHttpService,
                        CustomNGXLoggerService,
                        NGXMapperService,
                        DatePipe
                    ]
                },] }
    ];
    return LoggerModule;
}());
export { LoggerModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2VyLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1sb2dnZXIvIiwic291cmNlcyI6WyJsaWIvbG9nZ2VyLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLFlBQVksRUFBRSxRQUFRLEVBQUMsTUFBTSxpQkFBaUIsQ0FBQztBQUN2RCxPQUFPLEVBQXNCLFFBQVEsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUU1RCxPQUFPLEVBQUMsU0FBUyxFQUFDLE1BQU0sa0JBQWtCLENBQUM7QUFDM0MsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBQzdDLE9BQU8sRUFBQyxzQkFBc0IsRUFBQyxNQUFNLHlCQUF5QixDQUFDO0FBQy9ELE9BQU8sRUFBQyxvQkFBb0IsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBQ3BELE9BQU8sRUFBQyxnQkFBZ0IsRUFBQyxNQUFNLGtCQUFrQixDQUFDO0FBRWxEO0lBQUE7SUFvQ0EsQ0FBQzs7Ozs7SUF2QlEsb0JBQU87Ozs7SUFBZCxVQUFlLE1BQXVDO1FBQ3BELE9BQU87WUFDTCxRQUFRLEVBQUUsWUFBWTtZQUN0QixTQUFTLEVBQUU7Z0JBQ1QsRUFBQyxPQUFPLEVBQUUsWUFBWSxFQUFFLFFBQVEsRUFBRSxNQUFNLElBQUksRUFBRSxFQUFDO2dCQUMvQyxTQUFTO2dCQUNULG9CQUFvQjtnQkFDcEIsc0JBQXNCO2dCQUN0QixnQkFBZ0I7YUFDakI7U0FDRixDQUFDO0lBQ0osQ0FBQzs7OztJQUNNLHFCQUFROzs7SUFBZjtRQUNFLE9BQU87WUFDTCxRQUFRLEVBQUUsWUFBWTtZQUN0QixTQUFTLEVBQUU7Z0JBQ1QsU0FBUztnQkFDVCxvQkFBb0I7Z0JBQ3BCLHNCQUFzQjtnQkFDdEIsZ0JBQWdCO2FBQ2pCO1NBQ0YsQ0FBQztJQUNKLENBQUM7O2dCQW5DRixRQUFRLFNBQUM7b0JBQ1IsT0FBTyxFQUFFO3dCQUNQLFlBQVk7cUJBQ2I7b0JBQ0QsU0FBUyxFQUFFO3dCQUNULFNBQVM7d0JBQ1Qsb0JBQW9CO3dCQUNwQixzQkFBc0I7d0JBQ3RCLGdCQUFnQjt3QkFDaEIsUUFBUTtxQkFDVDtpQkFDRjs7SUF5QkQsbUJBQUM7Q0FBQSxBQXBDRCxJQW9DQztTQXhCWSxZQUFZIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb21tb25Nb2R1bGUsIERhdGVQaXBlfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHtNb2R1bGVXaXRoUHJvdmlkZXJzLCBOZ01vZHVsZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7TkdYTG9nZ2VyfSBmcm9tICcuL2xvZ2dlci5zZXJ2aWNlJztcbmltcG9ydCB7TG9nZ2VyQ29uZmlnfSBmcm9tICcuL2xvZ2dlci5jb25maWcnO1xuaW1wb3J0IHtDdXN0b21OR1hMb2dnZXJTZXJ2aWNlfSBmcm9tICcuL2N1c3RvbS1sb2dnZXIuc2VydmljZSc7XG5pbXBvcnQge05HWExvZ2dlckh0dHBTZXJ2aWNlfSBmcm9tICcuL2h0dHAuc2VydmljZSc7XG5pbXBvcnQge05HWE1hcHBlclNlcnZpY2V9IGZyb20gJy4vbWFwcGVyLnNlcnZpY2UnO1xuXG5ATmdNb2R1bGUoe1xuICBpbXBvcnRzOiBbXG4gICAgQ29tbW9uTW9kdWxlXG4gIF0sXG4gIHByb3ZpZGVyczogW1xuICAgIE5HWExvZ2dlcixcbiAgICBOR1hMb2dnZXJIdHRwU2VydmljZSxcbiAgICBDdXN0b21OR1hMb2dnZXJTZXJ2aWNlLFxuICAgIE5HWE1hcHBlclNlcnZpY2UsXG4gICAgRGF0ZVBpcGVcbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBMb2dnZXJNb2R1bGUge1xuICBzdGF0aWMgZm9yUm9vdChjb25maWc6IExvZ2dlckNvbmZpZyB8IG51bGwgfCB1bmRlZmluZWQpOiBNb2R1bGVXaXRoUHJvdmlkZXJzPExvZ2dlck1vZHVsZT4ge1xuICAgIHJldHVybiB7XG4gICAgICBuZ01vZHVsZTogTG9nZ2VyTW9kdWxlLFxuICAgICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIHtwcm92aWRlOiBMb2dnZXJDb25maWcsIHVzZVZhbHVlOiBjb25maWcgfHwge319LFxuICAgICAgICBOR1hMb2dnZXIsXG4gICAgICAgIE5HWExvZ2dlckh0dHBTZXJ2aWNlLFxuICAgICAgICBDdXN0b21OR1hMb2dnZXJTZXJ2aWNlLFxuICAgICAgICBOR1hNYXBwZXJTZXJ2aWNlXG4gICAgICBdXG4gICAgfTtcbiAgfVxuICBzdGF0aWMgZm9yQ2hpbGQoKTogTW9kdWxlV2l0aFByb3ZpZGVyczxMb2dnZXJNb2R1bGU+IHtcbiAgICByZXR1cm4ge1xuICAgICAgbmdNb2R1bGU6IExvZ2dlck1vZHVsZSxcbiAgICAgIHByb3ZpZGVyczogW1xuICAgICAgICBOR1hMb2dnZXIsXG4gICAgICAgIE5HWExvZ2dlckh0dHBTZXJ2aWNlLFxuICAgICAgICBDdXN0b21OR1hMb2dnZXJTZXJ2aWNlLFxuICAgICAgICBOR1hNYXBwZXJTZXJ2aWNlXG4gICAgICBdXG4gICAgfTtcbiAgfVxufVxuIl19