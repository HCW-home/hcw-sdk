/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { LoggerConfig } from './logger.config';
var NGXLoggerConfigEngine = /** @class */ (function () {
    function NGXLoggerConfigEngine(config) {
        this.config = config;
        this._config = config;
    }
    /**
     * @param {?} config
     * @return {?}
     */
    NGXLoggerConfigEngine.prototype.updateConfig = /**
     * @param {?} config
     * @return {?}
     */
    function (config) {
        this._config = this._clone(config);
    };
    /**
     * @return {?}
     */
    NGXLoggerConfigEngine.prototype.getConfig = /**
     * @return {?}
     */
    function () {
        return this._clone(this._config);
    };
    // TODO: add tests around cloning the config. updating an object passed into the config (or retrieving from the config)
    // should not update the active config, this is a shallow clone. If our config ever becomes hierarchical we must make
    // this a deep clone
    // TODO: add tests around cloning the config. updating an object passed into the config (or retrieving from the config)
    // should not update the active config, this is a shallow clone. If our config ever becomes hierarchical we must make
    // this a deep clone
    /**
     * @private
     * @param {?} object
     * @return {?}
     */
    NGXLoggerConfigEngine.prototype._clone = 
    // TODO: add tests around cloning the config. updating an object passed into the config (or retrieving from the config)
    // should not update the active config, this is a shallow clone. If our config ever becomes hierarchical we must make
    // this a deep clone
    /**
     * @private
     * @param {?} object
     * @return {?}
     */
    function (object) {
        /** @type {?} */
        var cloneConfig = new LoggerConfig();
        Object.keys(object).forEach((/**
         * @param {?} key
         * @return {?}
         */
        function (key) {
            cloneConfig[key] = object[key];
        }));
        return cloneConfig;
    };
    return NGXLoggerConfigEngine;
}());
export { NGXLoggerConfigEngine };
if (false) {
    /**
     * @type {?}
     * @private
     */
    NGXLoggerConfigEngine.prototype._config;
    /** @type {?} */
    NGXLoggerConfigEngine.prototype.config;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlnLmVuZ2luZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1sb2dnZXIvIiwic291cmNlcyI6WyJsaWIvY29uZmlnLmVuZ2luZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBRTdDO0lBR0UsK0JBQXFCLE1BQW9CO1FBQXBCLFdBQU0sR0FBTixNQUFNLENBQWM7UUFDdkMsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7SUFDeEIsQ0FBQzs7Ozs7SUFFRCw0Q0FBWTs7OztJQUFaLFVBQWEsTUFBb0I7UUFDL0IsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3JDLENBQUM7Ozs7SUFFRCx5Q0FBUzs7O0lBQVQ7UUFDRSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ25DLENBQUM7SUFFRCx1SEFBdUg7SUFDdkgscUhBQXFIO0lBQ3JILG9CQUFvQjs7Ozs7Ozs7O0lBQ1osc0NBQU07Ozs7Ozs7OztJQUFkLFVBQWUsTUFBVzs7WUFDbEIsV0FBVyxHQUFpQixJQUFJLFlBQVksRUFBRTtRQUVwRCxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU87Ozs7UUFBQyxVQUFDLEdBQUc7WUFDOUIsV0FBVyxDQUFDLEdBQUcsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNqQyxDQUFDLEVBQUMsQ0FBQztRQUVILE9BQU8sV0FBVyxDQUFDO0lBQ3JCLENBQUM7SUFDSCw0QkFBQztBQUFELENBQUMsQUEzQkQsSUEyQkM7Ozs7Ozs7SUF6QkMsd0NBQWdCOztJQUNKLHVDQUE2QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7TG9nZ2VyQ29uZmlnfSBmcm9tICcuL2xvZ2dlci5jb25maWcnO1xuXG5leHBvcnQgY2xhc3MgTkdYTG9nZ2VyQ29uZmlnRW5naW5lIHtcblxuICBwcml2YXRlIF9jb25maWc7XG4gIGNvbnN0cnVjdG9yKHJlYWRvbmx5IGNvbmZpZzogTG9nZ2VyQ29uZmlnKSB7XG4gICAgdGhpcy5fY29uZmlnID0gY29uZmlnO1xuICB9XG5cbiAgdXBkYXRlQ29uZmlnKGNvbmZpZzogTG9nZ2VyQ29uZmlnKSB7XG4gICAgdGhpcy5fY29uZmlnID0gdGhpcy5fY2xvbmUoY29uZmlnKTtcbiAgfVxuXG4gIGdldENvbmZpZygpIHtcbiAgICByZXR1cm4gdGhpcy5fY2xvbmUodGhpcy5fY29uZmlnKTtcbiAgfVxuXG4gIC8vIFRPRE86IGFkZCB0ZXN0cyBhcm91bmQgY2xvbmluZyB0aGUgY29uZmlnLiB1cGRhdGluZyBhbiBvYmplY3QgcGFzc2VkIGludG8gdGhlIGNvbmZpZyAob3IgcmV0cmlldmluZyBmcm9tIHRoZSBjb25maWcpXG4gIC8vIHNob3VsZCBub3QgdXBkYXRlIHRoZSBhY3RpdmUgY29uZmlnLCB0aGlzIGlzIGEgc2hhbGxvdyBjbG9uZS4gSWYgb3VyIGNvbmZpZyBldmVyIGJlY29tZXMgaGllcmFyY2hpY2FsIHdlIG11c3QgbWFrZVxuICAvLyB0aGlzIGEgZGVlcCBjbG9uZVxuICBwcml2YXRlIF9jbG9uZShvYmplY3Q6IGFueSkge1xuICAgIGNvbnN0IGNsb25lQ29uZmlnOiBMb2dnZXJDb25maWcgPSBuZXcgTG9nZ2VyQ29uZmlnKCk7XG5cbiAgICBPYmplY3Qua2V5cyhvYmplY3QpLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgY2xvbmVDb25maWdba2V5XSA9IG9iamVjdFtrZXldO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIGNsb25lQ29uZmlnO1xuICB9XG59XG4iXX0=