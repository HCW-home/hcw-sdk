{"version":3,"file":"ngx-logger.js","sources":["ng:/ngx-logger/lib/http.service.ts","ng:/ngx-logger/lib/types/logger-level.enum.ts","ng:/ngx-logger/lib/logger.config.ts","ng:/ngx-logger/lib/config.engine.ts","ng:/ngx-logger/lib/resources/color-schemes.ts","ng:/ngx-logger/lib/utils/logger.utils.ts","ng:/ngx-logger/lib/types/log-position.ts","ng:/ngx-logger/lib/mapper.service.ts","ng:/ngx-logger/lib/logger.service.ts","ng:/ngx-logger/lib/custom-logger.service.ts","ng:/ngx-logger/lib/logger.module.ts","ng:/ngx-logger/lib/logger-monitor.ts","ng:/ngx-logger/lib/types/ngx-log.interface.ts"],"names":["vlq.decode"],"mappings":";;;;;;;;;;;;;;AAAA,MASa,oBAAoB;AACjC;AAAQ;AAA8B;AAAQ,IAA5C,YAA6B,WAAwB;AAAI,QAA5B,gBAAW,GAAX,WAAW,CAAa;AAAC,KAAI;AAC5D;AACO;AAAsB;AAAsB;AAA0B;AAClE;AAAQ,IADjB,WAAW,CAAC,GAAW,EAAE,GAAoB,EAAE,OAAe;AAAI;AACnC;AAC2B;AAC5C,cAAN,GAAG,GAAG,IAAI,WAAW,CAAM,MAAM,EAAE,GAAG,EAAE,GAAG,EAAE,OAAO,IAAI,EAAE,CAAC;AACrE,QAAI,OAAO,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CACtC,MAAM;AAAM;AAAwB;AACvB;AAAY,QADlB,CAAC,IAAI,CAAC,YAAY,YAAY,EAAC,EACtC,GAAG;AAAM;AAAmC;AAAuB;AAAY,QAAnD,CAAC,YAA+B,KAAK,YAAY,CAAC,IAAI,EAAC,CACpF,CAAC;AACN,KAAG;AACH;gDAbC,UAAU;4HACT;AAAC;AAAmB;AACU,YATxB,WAAW;AAAG;;;4EAAE;AAAC;AAAC;AAAI;AAAkC;AAGvC;AAAI;AAAsB;AAIvC,ICPV,QAAS;AACX,IAAE,QAAS;AACX,IAAE,OAAQ;AACV,IAAE,MAAO;AACT,IAAE,OAAQ;AACV,IAAE,QAAS;AACX,IAAE,QAAS;AACX,IAAE,MAAO;AACR;AACC;AAAgD;AAAgD;AAA8C;AAA4C;AAA8C;AAAgD;AAAgD;AAA4C;AAAC;AAAI;AAAkC;AAAqH;ACPlhB,MAAa,YAAY;AACzB,CASC;AACD;AAAC;AAAI;AAAkC;AAAqH;ACd5J,MAEa,qBAAqB;AAClC;AACO;AACM;AAAQ,IAAnB,YAAqB,MAAoB;AAC3C,QADuB,WAAM,GAAN,MAAM,CAAc;AAAC,QACxC,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;AAC1B,KAAG;AACH;AACO;AAAyB;AACpB;AAAQ,IADlB,YAAY,CAAC,MAAoB;AACnC,QAAI,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;AACvC,KAAG;AACH;AACO;AACG;AAAQ,IADhB,SAAS;AACX,QAAI,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;AACrC,KAAG;AACH;AAEC;AACE;AACE;AAAQ;AAAgB;AACP;AAAmB;AAAQ,IADvC,MAAM,CAAC,MAAW;AAC5B;AAAyB,cAAf,WAAW,GAAiB,IAAI,YAAY,EAAE;AACxD,QACI,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,OAAO;AAAM;AACjB;AACf;AAEG,QAJwB,CAAC,GAAG;AACpC,YAAM,WAAW,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;AACrC,SAAK,EAAC,CAAC;AACP,QACI,OAAO,WAAW,CAAC;AACvB,KAAG;AACH,CAAC;AACD;AAAC;AAAI;AAAkC;AAAqH;AAAI;AC5BhK,MAAa,oBAAoB,GAAsB;AACvD,IAAE,QAAQ;AACV,IAAE,MAAM;AACR,IAAE,MAAM;AACR,IAAE,MAAM;AACR,IAAE,KAAK;AACP,IAAE,KAAK;AACP,IAAE,KAAK;AACP,CAAC;AACD;AAAC;AAAI;AAAkC;AAAqH;ACX5J,MAGa,cAAc;AAC3B;AACO;AAA4B;AAA2B;AAA2B;AAC3E;AAAmB;AAAQ,IADvC,OAAO,iBAAiB,CAAC,SAAiB,EAAE,QAAgB,EAAE,QAAgB,EAAE,UAAkB;AACpG;AAAyB,cAAf,WAAW,GAAG,QAAQ,GAAG,KAAK,QAAQ,IAAI,UAAU,GAAG,GAAG,EAAE;AACtE,QACI,OAAO,GAAG,SAAS,IAAI,QAAQ,GAAG,WAAW,EAAE,CAAC;AACpD,KAAG;AACH;AACO;AAAwB;AAAqC;AAAmB;AAAQ,IAA7F,OAAO,QAAQ,CAAC,KAAqB,EAAE,iBAAiC;AAAI,QAC1E,QAAQ,KAAK;AACjB,YAAM,KAAK,cAAc,CAAC,KAAK;AAC/B,gBAAQ,OAAO,IAAI,CAAC,kBAAkB,CAAC,cAAc,CAAC,KAAK,EAAE,iBAAiB,CAAC,CAAC;AAChF,YAAM,KAAK,cAAc,CAAC,KAAK;AAC/B,gBAAQ,OAAO,IAAI,CAAC,kBAAkB,CAAC,cAAc,CAAC,KAAK,EAAE,iBAAiB,CAAC,CAAC;AAChF,YAAM,KAAK,cAAc,CAAC,IAAI;AAC9B,gBAAQ,OAAO,IAAI,CAAC,kBAAkB,CAAC,cAAc,CAAC,IAAI,EAAE,iBAAiB,CAAC,CAAC;AAC/E,YAAM,KAAK,cAAc,CAAC,GAAG;AAC7B,gBAAQ,OAAO,IAAI,CAAC,kBAAkB,CAAC,cAAc,CAAC,IAAI,EAAE,iBAAiB,CAAC,CAAC;AAC/E,YAAM,KAAK,cAAc,CAAC,IAAI;AAC9B,gBAAQ,OAAO,IAAI,CAAC,kBAAkB,CAAC,cAAc,CAAC,KAAK,EAAE,iBAAiB,CAAC,CAAC;AAChF,YAAM,KAAK,cAAc,CAAC,KAAK;AAC/B,gBAAQ,OAAO,IAAI,CAAC,kBAAkB,CAAC,cAAc,CAAC,KAAK,EAAE,iBAAiB,CAAC,CAAC;AAChF,YAAM,KAAK,cAAc,CAAC,KAAK;AAC/B,gBAAQ,OAAO,IAAI,CAAC,kBAAkB,CAAC,cAAc,CAAC,KAAK,EAAE,iBAAiB,CAAC,CAAC;AAChF,YAAM,KAAK,cAAc,CAAC,GAAG,CAAC;AAC9B,YAAM;AACN,gBAAQ,OAAO;AACf,SAAK;AACL,KAAG;AACH;AACO;AAAgB;AAAwB;AAAoC;AAAmB;AACnG,IADO,OAAO,kBAAkB,CAAC,KAAa,EAAE,iBAAgC;AAAI,QACnF,IAAI,CAAC,iBAAiB,EAAE;AAC5B,YAAM,OAAO,oBAAoB,CAAC,KAAK,CAAC,CAAC;AACzC,SAAK;AACL,QACI,OAAO,iBAAiB,CAAC,KAAK,CAAC,CAAC;AACpC,KAAG;AACH;AAEC;AACE;AACa;AAAQ,IAAtB,OAAO,gBAAgB;AAAK;AAAyB,cAC7C,GAAG,IAAI,IAAI,KAAK,CAAC,EAAE,CAAC,CAAC;AAC/B,QACI,IAAI;AACR;AACM;AAA6B,kBAAvB,UAAU,GAAG,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC;AAC5D;AAEK;AAA6B,kBAAtB,cAAc,GAAG,UAAU,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC;AAC7F,YACM,OAAO;AACb,gBAAQ,QAAQ,EAAE,cAAc,CAAC,CAAC,CAAC;AACnC,gBAAQ,UAAU,EAAE,cAAc,CAAC,CAAC,CAAC;AACrC,aAAO,CAAC;AACR,SAAK;AAAC,QAAA,OAAO,CAAC,EAAE;AAChB,YAAM,OAAO;AACb,gBAAQ,QAAQ,EAAE,IAAI;AACtB,gBAAQ,UAAU,EAAE,IAAI;AACxB,aAAO,CAAC;AACR,SAAK;AACL,KACG;AACH;AACO;AAA0B;AAE1B;AAAQ,IAFb,OAAO,cAAc,CAAC,OAAO;AAC/B,QAAI,IAAI;AACR,YAAM,IAAI,OAAO,OAAO,KAAK,QAAQ,IAAI,EAAE,OAAO,YAAY,KAAK,CAAC,EAAE;AACtE,gBAAQ,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;AACnD,aAAO;AACP,SAAK;AAAC,QAAA,OAAO,CAAC,EAAE;AAChB;AACM,YAAA,OAAO,GAAG,yEAAyE,CAAC;AAC1F,SAAK;AACL,QACI,OAAO,OAAO,CAAC;AACnB,KAAG;AACH;AACO;AAA6B;AAAmB;AAClD,IADH,OAAO,2BAA2B,CAAC,UAAiB;AACtD,QAAI,IAAI,UAAU,KAAK,IAAI,IAAI,UAAU,KAAK,SAAS,EAAE;AACzD,YAAM,OAAO,IAAI,CAAC;AAClB,SAAK;AACL,QACI,OAAO,UAAU,CAAC,GAAG;AAAM;AAE5B;AAA0B;AAAuB;AAAY,QAFtC,CAAC,IAAI,EAAE,GAAG;AACpC,YAAM,IAAI;AACV;AACQ,gBAAA,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;AACtC,oBAAU,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;AAC/B,iBAAS;AACT,gBACQ,OAAO,IAAI,CAAC;AACpB,aAAO;AAAC,YAAA,OAAO,CAAC,EAAE;AAClB,gBAAQ,OAAO,kBAAkB,GAAG,qDAAqD,CAAC;AAC1F,aAAO;AACP,SAAK,EAAC,CAAC;AACP,KAAG;AACH,CACC;AACD;AAAC;AAAI;AAAkC;AAAqH;ACpG5J,MAAa,WAAW;AACxB;AAAQ;AACY;AACA;AACA;AAAQ,IAH1B,YACS,QAAgB,EAChB,UAAkB,EAClB,YAAoB;AAC5B,QAHQ,aAAQ,GAAR,QAAQ,CAAQ;AAAC,QACjB,eAAU,GAAV,UAAU,CAAQ;AAAC,QACnB,iBAAY,GAAZ,YAAY,CAAQ;AAC/B,KAAM;AACN;AAAQ;AACI;AAAQ,IADlB,QAAQ;AACV,QAAI,OAAO,IAAI,CAAC,QAAQ,GAAG,GAAG,GAAG,IAAI,CAAC,UAAU,GAAG,GAAG,GAAG,IAAI,CAAC,YAAY,CAAC;AAC3E,KAAG;AACH,CAAC;AACD;AAAC;AAAI;AAAkC;AAAqH;ACT5J,MAQa,gBAAgB;AAC7B;AACO;AAA8B;AAAQ,IAM3C,YAAoB,WAAwB;AAC9C,QADsB,gBAAW,GAAX,WAAW,CAAa;AAAC;AAOvB,QAZd,mBAAc,GAAuC,IAAI,GAAG,EAAE,CAAC;AACzE;AAEK,QAAK,qBAAgB,GAAyC,IAAI,GAAG,EAAE,CAAC;AAC7E,KAEG;AACH;AAEC;AAEA;AAAQ;AAAQ;AAAgB;AACvB;AAAQ,IADR,OAAO,YAAY;AAAK;AACjB,cAAP,KAAK,GAAG,IAAI,KAAK,EAAE;AAC7B,QACI,IAAI;AACR;AACM,YAAA,MAAM,KAAK,CAAC;AAClB,SAAK;AAAC,QAAA,OAAO,CAAC,EAAE;AAChB,YACM,IAAI;AACV,gBAAQ,OAAO,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1C,aAAO;AAAC,YAAA,OAAO,CAAC,EAAE;AAClB,gBAAQ,OAAO,IAAI,CAAC;AACpB,aAAO;AACP,SAAK;AACL,KAAG;AACH;AACO;AAAgB;AAA4B;AAC5C;AAAQ,IADL,OAAO,WAAW,CAAC,SAAiB;AAAI;AACG;AACrC,cAAN,kBAAkB,GAAG,SAAS,CAAC,WAAW,CAAC,IAAI,CAAC;AAC1D;AAAyB,YAAjB,gBAAgB,GAAG,SAAS,CAAC,OAAO,CAAC,GAAG,CAAC;AACjD,QAAI,IAAI,gBAAgB,GAAG,CAAC,EAAE;AAC9B,YAAM,gBAAgB,GAAG,SAAS,CAAC;AACnC,SAAK;AACL;AACwB,cAAd,QAAQ,GAAG,SAAS,CAAC,SAAS,CAAC,kBAAkB,GAAG,CAAC,EAAE,gBAAgB,CAAC;AAClF;AAAyB,cAAf,SAAS,GAAG,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC;AACzC,QAAI,IAAI,SAAS,CAAC,MAAM,KAAK,CAAC,EAAE;AAChC,YAAM,OAAO,IAAI,WAAW,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;AACzE,SAAK;AACL,QAAI,OAAO,IAAI,WAAW,CAAC,SAAS,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;AAC5C,KAAG;AACH;AACO;AAAgB;AAA4B;AAChD;AAAQ,IADD,OAAO,oBAAoB,CAAC,SAAiB;AAAI;AAC1C,YAAT,kBAAkB,GAAG,SAAS,CAAC,OAAO,CAAC,GAAG,CAAC;AACnD,QAAI,IAAI,kBAAkB,GAAG,CAAC,EAAE;AAChC,YAAM,kBAAkB,GAAG,SAAS,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;AACtD,SAAK;AACL;AACwB,YAAhB,gBAAgB,GAAG,SAAS,CAAC,OAAO,CAAC,GAAG,CAAC;AACjD,QAAI,IAAI,gBAAgB,GAAG,CAAC,EAAE;AAC9B,YAAM,gBAAgB,GAAG,SAAS,CAAC;AACnC,SAAK;AACL,QACI,OAAO,SAAS,CAAC,SAAS,CAAC,kBAAkB,GAAG,CAAC,EAAE,gBAAgB,CAAC,CAAC;AACzE,KAAG;AACH;AACO;AAAgB;AAA4B;AAC1C;AAAQ,IADP,OAAO,cAAc,CAAC,SAAiB;AAAI;AACpC,cAAP,IAAI,GAAG,gBAAgB,CAAC,oBAAoB,CAAC,SAAS,CAAC;AACjE;AAAyB,cAAf,WAAW,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;AAChE,QAAI,OAAO,WAAW,CAAC,SAAS,CAAC,CAAC,EAAE,WAAW,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC;AAC3E,KAAG;AACH;AACO;AAAgB;AAA4B;AAA2B;AACrE;AAAQ,IADP,OAAO,UAAU,CAAC,SAAoB,EAAE,QAAqB;AAAI;AAC9C;AACS;AACyE;AACvF,YAAhB,eAAe,GAAG,CAAC;AAAE;AACtB;AAA4B,QAA7B,cAAc,GAAG,CAAC;AAAE;AACnB;AAA2B,QAA5B,gBAAgB,GAAG,CAAC;AAAE;AAEtB;AAAyB,cAArB,KAAK,GAAG,SAAS,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC;AAC/C,QACI,KAAK,IAAI,SAAS,GAAG,CAAC,EAAE,SAAS,GAAG,KAAK,CAAC,MAAM,EAAE,SAAS,EAAE,EAAE;AACnE;AACM;AACN,gBADU,mBAAmB,GAAG,CAAC;AACjC;AACM;AAA6B,kBAAvB,OAAO,GAAG,KAAK,CAAC,SAAS,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC;AACjD,YACM,KAAK,IAAI,WAAW,GAAG,CAAC,EAAE,WAAW,GAAG,OAAO,CAAC,MAAM,EAAE,WAAW,EAAE,EAAE;AAC7E;AAAiC,sBAAnB,cAAc,GAAGA,MAAU,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;AAC/D,gBAAQ,IAAI,cAAc,CAAC,MAAM,IAAI,CAAC,EAAE;AACxC;AACU,oBAAA,mBAAmB,IAAI,cAAc,CAAC,CAAC,CAAC,CAAC;AACnD,oBAAU,eAAe,IAAI,cAAc,CAAC,CAAC,CAAC,CAAC;AAC/C,oBAAU,cAAc,IAAI,cAAc,CAAC,CAAC,CAAC,CAAC;AAC9C,oBAAU,gBAAgB,IAAI,cAAc,CAAC,CAAC,CAAC,CAAC;AAChD,iBAAS;AACT;AAEO,gBAAC,IAAI,SAAS,KAAK,QAAQ,CAAC,UAAU,EAAE;AAC/C,oBAAU,IAAI,mBAAmB,KAAK,QAAQ,CAAC,YAAY,EAAE;AAC7D;AACY,wBAAA,OAAO,IAAI,WAAW,CAAC,SAAS,CAAC,OAAO,CAAC,eAAe,CAAC,EAAE,cAAc,EAAE,gBAAgB,CAAC,CAAC;AACzG,qBAAW;AAAC,yBAAK,IAAI,WAAW,GAAG,CAAC,KAAK,OAAO,CAAC,MAAM,EAAE;AACzD;AACY,wBAAA,OAAO,IAAI,WAAW,CAAC,SAAS,CAAC,OAAO,CAAC,eAAe,CAAC,EAAE,cAAc,EAAE,CAAC,CAAC,CAAC;AAC1F,qBAAW;AACX,iBAAS;AACT,aAAO;AACP,SAAK;AACL;AACI,QAAA,OAAO,IAAI,WAAW,CAAC,SAAS,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;AAC5C,KAAG;AACH;AAEC;AACE;AAAgB;AAEnB;AACyB;AAAmB;AAAQ,IAA1C,aAAa,CAAC,iBAAyB,EAAE,YAAyB;AAAI;AAChF,cAAU,GAAG,GAAG,IAAI,WAAW,CAAY,KAAK,EAAE,iBAAiB,CAAC;AACpE;AAAyB,cAAf,eAAe,GAAG,YAAY,CAAC,QAAQ,EAAE;AACnD;AAEG,QAAC,IAAI,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,eAAe,CAAC,EAAE;AACpD,YAAM,OAAO,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;AACxD,SAAK;AACL;AAEG,QAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,iBAAiB,CAAC,EAAE;AACrD;AACM,YAAA,IAAI,CAAC,cAAc,CAAC,GAAG,CACrB,iBAAiB,EACjB,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAC/B,MAAM;AAAM;AAA4B;AACzB;AAAgB,YADxB,CAAC,CAAC,KAAK,CAAC,YAAY,YAAY,EAAC,EACxC,GAAG;AAAM;AACZ;AAA2B;AAAgB,YAAtC,CAAC,YAAqC,KAAK,YAAY,CAAC,IAAI,EAC7D,EACD,KAAK,CAAC,CAAC,CAAC,EACR,WAAW,CAAC,CAAC,CAAC,CACf,CACF,CAAC;AACR,SAAK;AACL;AAEG;AAAyB,cAAlB,YAAY,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC,IAAI,CAClE,GAAG;AAAM;AAAgC;AAC1B;AAAY,QADC,CAAC,SAAS;AAC3C;AACA,QAAO,gBAAgB,CAAC,UAAU,CAAC,SAAS,EAAE,YAAY,CAAC,EACrD,EACD,UAAU;AAAM;AACnB;AAAY,QADE,MAAM,EAAE,CAAC,YAAY,CAAC,EAAC,EAClC,WAAW,CAAC,CAAC,CAAC,CACf;AACL;AAEG,QAAC,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,eAAe,EAAE,YAAY,CAAC,CAAC;AAC7D,QACI,OAAO,YAAY,CAAC;AACxB,KAAG;AACH;AAEC;AACE;AACE;AACE;AAEA;AAAmB;AAAQ,IAAzB,gBAAgB,CAAC,iBAA0B;AAAI;AACxB;AAEG;AAE/B,cAFM,SAAS,GAAG,gBAAgB,CAAC,YAAY,EAAE;AACrD;AAEG,QAAC,IAAI,CAAC,SAAS,EAAE;AACpB,YAAM,OAAO,EAAE,CAAC,IAAI,WAAW,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AAC3C,SAAK;AACL,QACI,OAAO,EAAE,CAAC;AACd,YAAM,gBAAgB,CAAC,WAAW,CAAC,SAAS,CAAC;AAC7C,YAAM,gBAAgB,CAAC,cAAc,CAAC,SAAS,CAAC;AAChD,SAAK,CAAC,CAAC,IAAI,CACL,SAAS;AAAM;AAA0B;AAAuB;AAAY,QAAlB,CAAC,CAAC,YAAY,EAAE,iBAAiB,CAAC;AAClG;AAEG;AACI,YAAC,IAAI,CAAC,iBAAiB,EAAE;AAChC,gBAAU,OAAO,EAAE,CAAC,YAAY,CAAC,CAAC;AAClC,aAAS;AACT;AAEG,YAAK,OAAO,IAAI,CAAC,aAAa,CAAC,iBAAiB,EAAE,YAAY,CAAC,CAAC;AACnE,SAAO,EAAC,CACH,CAAC;AACN,KAEG;AACH;4CA9LC,UAAU;gHACT;AAAC;AAAmB;AAES,YATvB,WAAW;AAAG;;;4EAAE;AAAC;AAAC;AAAI;AAAkC;AAGzB;ACLvC;AAcA,MAAa,MAAM,GAAG;AACtB,IAAE,OAAO;AACT,IAAE,OAAO;AACT,IAAE,MAAM;AACR,IAAE,KAAK;AACP,IAAE,MAAM;AACR,IAAE,OAAO;AACT,IAAE,OAAO;AACT,IAAE,KAAK;AACP,CAAC;AAID,MAAa,SAAS;AACtB;AAAQ;AACH;AAA8B;AACR;AACZ;AAA2B;AACnC,IAKL,YAA6B,aAA+B,EAAmB,WAAiC,EAC9G,YAA0B,EAA+B,UAAU,EAClD,QAAkB;AACvC,QAH+B,kBAAa,GAAb,aAAa,CAAkB;AAAC,QAAkB,gBAAW,GAAX,WAAW,CAAsB;AAAC,QACtD,eAAU,GAAV,UAAU,CAAA;AAAC,QACnD,aAAQ,GAAR,QAAQ,CAAU;AAAC,QAN9B,qBAAgB,GAAY,KAAK,CAAC;AAC5C,QAMI,IAAI,CAAC,KAAK,GAAG,iBAAiB,CAAC,UAAU,CAAC,IAAI,SAAS,IAAI,SAAS,CAAC,SAAS;AAClF,YAAM,CAAC,EAAE,SAAS,CAAC,SAAS,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,IAAI,SAAS,CAAC,SAAS,CAAC,KAAK,CAAC,WAAW,CAAC,IAAI,SAAS,CAAC,SAAS,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC;AACtI;AAEG,QAAC,IAAI,CAAC,MAAM,GAAG,IAAI,qBAAqB,CAAC,YAAY,CAAC,CAAC;AAC1D,QACI,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACrF,KACG;AACH;AACO;AAA0B;AACtB;AAAmB;AAAQ,IAD7B,KAAK,CAAC,OAAO,EAAE,GAAG,UAAiB;AAAI,QAC5C,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,OAAO,EAAE,UAAU,CAAC,CAAC;AACzD,KAAG;AACH;AACO;AAA0B;AACtB;AAAmB;AAAQ,IAD7B,KAAK,CAAC,OAAO,EAAE,GAAG,UAAiB;AAAI,QAC5C,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,OAAO,EAAE,UAAU,CAAC,CAAC;AACzD,KAAG;AACH;AACO;AAA0B;AACrB;AAAmB;AAAQ,IAD9B,IAAI,CAAC,OAAO,EAAE,GAAG,UAAiB;AAAI,QAC3C,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,OAAO,EAAE,UAAU,CAAC,CAAC;AACxD,KAAG;AACH;AACO;AAA0B;AACpB;AAAmB;AAAQ,IAD/B,GAAG,CAAC,OAAO,EAAE,GAAG,UAAiB;AAAI,QAC1C,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,EAAE,OAAO,EAAE,UAAU,CAAC,CAAC;AACvD,KAAG;AACH;AACO;AAA0B;AACrB;AAAmB;AAAQ,IAD9B,IAAI,CAAC,OAAO,EAAE,GAAG,UAAiB;AAAI,QAC3C,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,OAAO,EAAE,UAAU,CAAC,CAAC;AACxD,KAAG;AACH;AACO;AAA0B;AACtB;AAAmB;AAAQ,IAD7B,KAAK,CAAC,OAAO,EAAE,GAAG,UAAiB;AAAI,QAC5C,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,OAAO,EAAE,UAAU,CAAC,CAAC;AACzD,KAAG;AACH;AACO;AAA0B;AACtB;AAAmB;AAAQ,IAD7B,KAAK,CAAC,OAAO,EAAE,GAAG,UAAiB;AAAI,QAC5C,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,OAAO,EAAE,UAAU,CAAC,CAAC;AACzD,KAAG;AACH;AACO;AAA0B;AAAmB;AAC9C,IADG,oBAAoB,CAAC,OAAoB;AAClD,QAAI,IAAI,CAAC,kBAAkB,GAAG,OAAO,CAAC;AACtC,KAAG;AACH;AACO;AAAyB;AAC5B;AAAQ,IADH,eAAe,CAAC,MAAkB;AAC3C,QAAI,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC;AAChC,KAAG;AACH;AACO;AAAkC;AAAmB;AAC3D,IADQ,6BAA6B,CAAC,eAAwB;AAC/D,QAAI,IAAI,CAAC,gBAAgB,GAAG,eAAe,CAAC;AAC5C,KAAG;AACH;AACO;AAA0B;AAAmB;AAC9C,IADG,eAAe,CAAC,OAAyB;AAClD,QAAI,IAAI,CAAC,cAAc,GAAG,OAAO,CAAC;AAClC,KAAG;AACH;AACO;AAAyB;AAC3B;AAAQ,IADJ,YAAY,CAAC,MAAoB;AAC1C,QAAI,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;AACrC,KAAG;AACH;AACO;AAAmB;AAAQ,IAAzB,iBAAiB;AAAK,QAC3B,OAAO,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC;AACnC,KAAG;AACH;AACO;AAAgB;AAAwB;AAA6B;AAA0B;AAE5E;AAChB;AAAQ,IAHR,MAAM,CAAC,KAAqB,EAAE,UAAkB,EAAE,OAAe,EAAE,UAAiB;AAAI;AAElE;AAE/B,QAAG,UAAU,GAAG,UAAU,IAAI,EAAE,CAAC;AAClC,QACI,QAAQ,KAAK;AACjB,YAAM,KAAK,cAAc,CAAC,IAAI;AAC9B,gBAAQ,OAAO,CAAC,IAAI,CAAC,GAAG,UAAU,GAAG,EAAE,OAAO,EAAE,GAAG,UAAU,CAAC,CAAC;AAC/D,gBAAQ,MAAM;AACd,YAAM,KAAK,cAAc,CAAC,KAAK,CAAC;AAChC,YAAM,KAAK,cAAc,CAAC,KAAK;AAC/B,gBAAQ,OAAO,CAAC,KAAK,CAAC,GAAG,UAAU,GAAG,EAAE,OAAO,EAAE,GAAG,UAAU,CAAC,CAAC;AAChE,gBAAQ,MAAM;AACd,YAAM,KAAK,cAAc,CAAC,IAAI;AAC9B,gBAAQ,OAAO,CAAC,IAAI,CAAC,GAAG,UAAU,GAAG,EAAE,OAAO,EAAE,GAAG,UAAU,CAAC,CAAC;AAC/D,gBAAQ,MAAM;AACd,YAAM;AACN,gBAAQ,OAAO,CAAC,GAAG,CAAC,GAAG,UAAU,GAAG,EAAE,OAAO,EAAE,GAAG,UAAU,CAAC,CAAC;AAC9D,SAAK;AACL,KAAG;AACH;AACO;AAAgB;AAAwB;AAA6B;AAA0B;AAC/E;AAAmB;AAAQ,IADxC,UAAU,CAAC,KAAqB,EAAE,UAAkB,EAAE,OAAe,EAAE,UAAiB;AAAI;AACnF,cAAT,gBAAgB,GAAG,IAAI,CAAC,iBAAiB,EAAE,CAAC,WAAW;AACjE;AAAyB,cAAf,KAAK,GAAG,cAAc,CAAC,QAAQ,CAAC,KAAK,EAAE,gBAAgB,CAAC;AAClE;AAEG,QAAC,UAAU,GAAG,UAAU,IAAI,EAAE,CAAC;AAClC,QACI,QAAQ,KAAK;AACjB,YAAM,KAAK,cAAc,CAAC,IAAI;AAC9B,gBAAQ,OAAO,CAAC,IAAI,CAAC,KAAK,UAAU,EAAE,EAAE,SAAS,KAAK,EAAE,EAAE,OAAO,EAAE,GAAG,UAAU,CAAC,CAAC;AAClF,gBAAQ,MAAM;AACd,YAAM,KAAK,cAAc,CAAC,KAAK,CAAC;AAChC,YAAM,KAAK,cAAc,CAAC,KAAK;AAC/B,gBAAQ,OAAO,CAAC,KAAK,CAAC,KAAK,UAAU,EAAE,EAAE,SAAS,KAAK,EAAE,EAAE,OAAO,EAAE,GAAG,UAAU,CAAC,CAAC;AACnF,gBAAQ,MAAM;AACd,YAAM,KAAK,cAAc,CAAC,IAAI;AAC9B,gBAAQ,OAAO,CAAC,IAAI,CAAC,KAAK,UAAU,EAAE,EAAE,SAAS,KAAK,EAAE,EAAE,OAAO,EAAE,GAAG,UAAU,CAAC,CAAC;AAClF,gBAAQ,MAAM;AACd;AACM;AACM;AACM;AAGb;AAAwB;AACM;AACM;AAG3B;AAAwB,YADhC;AACN,gBAAQ,OAAO,CAAC,GAAG,CAAC,KAAK,UAAU,EAAE,EAAE,SAAS,KAAK,EAAE,EAAE,OAAO,EAAE,GAAG,UAAU,CAAC,CAAC;AACjF,SAAK;AACL,KAAG;AACH;AACO;AAAgB;AAAwB;AAA0B;AAA8B;AAC7E;AACzB;AAAQ,IAFC,IAAI,CAAC,KAAqB,EAAE,OAAO,EAAE,aAAoB,EAAE,EAAE,cAAuB,IAAI;AAAI;AACnF,cAAT,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE;AAC1C;AAAyB,cAAf,YAAY,GAAG,WAAW,IAAI,MAAM,CAAC,gBAAgB,IAAI,KAAK,IAAI,MAAM,CAAC,cAAc;AACjG;AAAyB,cAAf,iBAAiB,GAAG,KAAK,IAAI,MAAM,CAAC,KAAK;AACnD,QACI,IAAI,EAAE,OAAO,KAAK,YAAY,IAAI,iBAAiB,CAAC,CAAC,EAAE;AAC3D,YAAM,OAAO;AACb,SAAK;AACL;AACwB,cAAd,cAAc,GAAG,MAAM,CAAC,KAAK,CAAC;AACxC,QACI,OAAO,GAAG,OAAO,OAAO,KAAK,UAAU,GAAG,OAAO,EAAE,GAAG,OAAO,CAAC;AAClE,QAAI,OAAO,GAAG,cAAc,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;AACrD;AAEG;AAAyB,cAAlB,6BAA6B,GAAG,cAAc,CAAC,2BAA2B,CAAC,UAAU,CAAC;AAChG;AACwB,cAAd,SAAS,GAAG,MAAM,CAAC,eAAe;AAC5C,YAAM,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,IAAI,EAAE,EAAE,MAAM,CAAC,eAAe,CAAC;AACjE,YAAM,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;AAC9B;AAEG,QAAC,IAAI,CAAC,aAAa,CAAC,gBAAgB,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC,SAAS;AAAM;AACzE;AAAuB;AAAY,QADiC,CAAC,aAA0B;AACtG;AAA6B,kBAAjB,SAAS,GAAoB;AACzC,gBAAQ,OAAO,EAAE,OAAO;AACxB,gBAAQ,UAAU,EAAE,6BAA6B;AACjD,gBAAQ,KAAK,EAAE,KAAK;AACpB,gBAAQ,SAAS,EAAE,SAAS;AAC5B,gBAAQ,QAAQ,EAAE,aAAa,CAAC,QAAQ;AACxC,gBAAQ,UAAU,EAAE,aAAa,CAAC,UAAU,CAAC,QAAQ,EAAE;AACvD,aAAO;AACP,YACM,IAAI,IAAI,CAAC,cAAc,IAAI,iBAAiB,EAAE;AACpD,gBAAQ,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;AAC7C,aAAO;AACP,YACM,IAAI,YAAY,EAAE;AACxB;AACQ,gBAAA,OAAO,GAAG,OAAO,YAAY,KAAK,GAAG,OAAO,CAAC,KAAK,GAAG,OAAO,CAAC;AACrE,gBAAQ,SAAS,CAAC,OAAO,GAAG,OAAO,CAAC;AACpC;AACgC,sBAAlB,OAAO,GAAG,IAAI,CAAC,kBAAkB,IAAI,IAAI,WAAW,EAAE;AACpE,gBAAQ,OAAO,CAAC,GAAG,CAAC,cAAc,EAAE,kBAAkB,CAAC,CAAC;AACxD;AAEM,sBADQ,OAAO,GAAG;AACxB,oBAAU,OAAO,EAAE,OAAO;AAC1B,oBAAU,MAAM,EAAE,IAAI,CAAC,aAAa,IAAI,IAAI,UAAU,EAAE;AACxD,oBAAU,YAAY,EAAE,MAAM,CAAC,gBAAgB,IAAI,MAAM;AACzD,oBAAU,eAAe,EAAE,IAAI,CAAC,gBAAgB;AAChD,iBAAS;AACT;AACQ,gBAAA,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,MAAM,CAAC,gBAAgB,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC,SAAS;AAAM;AAC1E;AAA+B;AAEnD,gBAHyF,CAAC,GAAQ;AACrG;AACU,iBAAD;AACH;AACN;AAA+B;AAAoB,gBADzC,CAAC,KAAwB;AACnC,oBAAY,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,4BAA4B,OAAO,EAAE,EAAE,CAAC,KAAK,CAAC,EAAE,KAAK,CAAC,CAAC;AACnG,iBAAW,EACF,CAAC;AACV,aAAO;AACP;AAGI,YAAE,IAAI,iBAAiB,IAAI,CAAC,MAAM,CAAC,qBAAqB,EAAE;AAC9D;AAAiC,sBAAnB,UAAU,GAAG,cAAc,CAAC,iBAAiB,CAAC,SAAS,EAAE,cAAc,EAC3E,aAAa,CAAC,QAAQ,EAAE,aAAa,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC;AACtE,gBACQ,OAAO,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,UAAU,EAAE,OAAO,EAAE,UAAU,CAAC,CAAC;AACrE,aAAO;AACP,SAAK,EAAC,CAAC;AACP,KAAG;AACH;qCAzMC,UAAU;2FACT;AAAC;AAAmB;AACU,YAhBvB,gBAAgB;AAAI,YARpB,oBAAoB;AAAI,YAGxB,YAAY;AAAI,4CA+BQ,MAAM,SAAC,WAAW;AAAS,YApChC,QAAQ;AAAG;;;;;;6DAAE;AAAC;AAAC;AAAI;AAE9B;AAEU;ACN3B;AAAI;AACwB;AAa5B,MAAa,sBAAsB;AACnC;AACO;AAAgC;AAClC;AAA6B;AAA2B;AAC1D,IAFD,YAA6B,aAA+B,EAC/B,WAAiC,EACZ,UAAU,EAAmB,QAAkB;AACnG,QAH+B,kBAAa,GAAb,aAAa,CAAkB;AAAC,QAChC,gBAAW,GAAX,WAAW,CAAsB;AAAC,QACb,eAAU,GAAV,UAAU,CAAA;AAAC,QAAkB,aAAQ,GAAR,QAAQ,CAAU;AAAC,KACjG;AACH;AACO;AAAyB;AAA+B;AAA8B;AACjE;AAAmB;AAAQ,IADrD,MAAM,CAAC,MAAoB,EAAE,WAAkC,EAAE,UAA6B,EACvF,aAAgC;AAAI;AACW;AACtC,cAAR,MAAM,GAAG,IAAI,SAAS,CAAC,aAAa,IAAI,IAAI,CAAC,aAAa,EAC9D,WAAW,IAAI,IAAI,CAAC,WAAW,EAAE,MAAM,EAAE,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,QAAQ,CAAC;AAC9E,QACI,IAAI,UAAU,EAAE;AACpB,YAAM,MAAM,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;AACzC,SAAK;AACL,QACI,OAAO,MAAM,CAAC;AAClB,KAAG;AACH;kDApBC,UAAU;kIACT;AAAC;AAAmB;AAES,YATvB,gBAAgB;AAAI,YAHpB,oBAAoB;AAAI,4CAcjB,MAAM,SAAC,WAAW;AAAS,YAjBjC,QAAQ;AAAG;;;;;;6DAAE;AAAC;AAAC;AAAI;AAEX;AAEkB;ACLnC,MAqBa,YAAY;AACzB;AAAQ;AAAyB;AAAmB;AAAQ,IAA1D,OAAO,OAAO,CAAC,MAAuC;AAAI,QACxD,OAAO;AACX,YAAM,QAAQ,EAAE,YAAY;AAC5B,YAAM,SAAS,EAAE;AACjB,gBAAQ,EAAC,OAAO,EAAE,YAAY,EAAE,QAAQ,EAAE,MAAM,IAAI,EAAE,EAAC;AACvD,gBAAQ,SAAS;AACjB,gBAAQ,oBAAoB;AAC5B,gBAAQ,sBAAsB;AAC9B,gBAAQ,gBAAgB;AACxB,aAAO;AACP,SAAK,CAAC;AACN,KAAG;AACH;AAAQ;AAAmB;AAAQ,IAAjC,OAAO,QAAQ;AAAK,QAClB,OAAO;AACX,YAAM,QAAQ,EAAE,YAAY;AAC5B,YAAM,SAAS,EAAE;AACjB,gBAAQ,SAAS;AACjB,gBAAQ,oBAAoB;AAC5B,gBAAQ,sBAAsB;AAC9B,gBAAQ,gBAAgB;AACxB,aAAO;AACP,SAAK,CAAC;AACN,KAAG;AACH;wCApCC,QAAQ,SAAC;MACR,OAAO,EAAE,sBACP,YAAY,kBACb,kBACD,SAAS,EAAE,sBACT,SAAS;SACT;UAAoB;EACpB,sBAAsB;cACtB;IAAgB;SAChB,QAAQ;gBACT;KACF;;;;;;;;;;;;;;;;0BACI;AAAC;AAAC;AAAI;AACM;AAES;AAC1B;AAAI;AAAa;ACvBjB,MAAsB,gBAAgB;AACtC,CACC;AACD;AAAC;AAAI;AAAkC;AAAqH;ACH5J,MAAa,eAAe;AAC5B,CAMC;AACD;AAAC;AAAmN","sourcesContent":["import { Injectable } from '@angular/core';\nimport {HttpBackend, HttpRequest, HttpResponse} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport {filter, map} from 'rxjs/operators';\nimport { NGXLogInterface } from './types/ngx-log.interface';\n\n\n\n@Injectable()\nexport class NGXLoggerHttpService {\n  constructor(private readonly httpBackend: HttpBackend) { }\n\n  logOnServer(url: string, log: NGXLogInterface, options: object): Observable<any> {\n    // HttpBackend skips all HttpInterceptors\n    // They may log errors using this service causing circular calls\n    const req = new HttpRequest<any>('POST', url, log, options || {});\n    return this.httpBackend.handle(req).pipe(\n      filter(e => e instanceof HttpResponse),\n      map<HttpResponse<any>, any>((httpResponse: HttpResponse<any>) => httpResponse.body)\n    );\n  }\n\n}\n","export enum NgxLoggerLevel {\n  TRACE = 0,\n  DEBUG = 1,\n  INFO = 2,\n  LOG = 3,\n  WARN = 4,\n  ERROR = 5,\n  FATAL = 6,\n  OFF = 7\n}\n","import {LoggerColorScheme} from './types/logger-color-scheme';\nimport {NgxLoggerLevel} from './types/logger-level.enum';\n\nexport class LoggerConfig {\n  level: NgxLoggerLevel;\n  serverLogLevel?: NgxLoggerLevel;\n  serverLoggingUrl?: string;\n  disableConsoleLogging?: boolean;\n  httpResponseType?: 'arraybuffer' | 'blob' | 'text' | 'json';\n  enableSourceMaps?: boolean;\n  /** Timestamp format: any format accepted by Angular DatePipe. Defaults to ISOString */\n  timestampFormat?: string;\n  colorScheme?: LoggerColorScheme;\n}\n","import {LoggerConfig} from './logger.config';\n\nexport class NGXLoggerConfigEngine {\n\n  private _config;\n  constructor(readonly config: LoggerConfig) {\n    this._config = config;\n  }\n\n  updateConfig(config: LoggerConfig) {\n    this._config = this._clone(config);\n  }\n\n  getConfig() {\n    return this._clone(this._config);\n  }\n\n  // TODO: add tests around cloning the config. updating an object passed into the config (or retrieving from the config)\n  // should not update the active config, this is a shallow clone. If our config ever becomes hierarchical we must make\n  // this a deep clone\n  private _clone(object: any) {\n    const cloneConfig: LoggerConfig = new LoggerConfig();\n\n    Object.keys(object).forEach((key) => {\n      cloneConfig[key] = object[key];\n    });\n\n    return cloneConfig;\n  }\n}\n","import {LoggerColorScheme} from '../types/logger-color-scheme';\n\nexport const DEFAULT_COLOR_SCHEME: LoggerColorScheme = [\n  'purple',\n  'teal',\n  'gray',\n  'gray',\n  'red',\n  'red',\n  'red'\n];\n","import {DEFAULT_COLOR_SCHEME} from '../resources/color-schemes';\nimport {NgxLoggerLevel} from '../types/logger-level.enum';\n\nexport class NGXLoggerUtils {\n\n  static prepareMetaString(timestamp: string, logLevel: string, fileName: string, lineNumber: string) {\n    const fileDetails = fileName ? ` [${fileName}:${lineNumber}]` : '';\n\n    return `${timestamp} ${logLevel}${fileDetails}`;\n  }\n\n  static getColor(level: NgxLoggerLevel, configColorScheme?: Array<string>): string | undefined {\n    switch (level) {\n      case NgxLoggerLevel.TRACE:\n        return this.getColorFromConfig(NgxLoggerLevel.TRACE, configColorScheme);\n      case NgxLoggerLevel.DEBUG:\n        return this.getColorFromConfig(NgxLoggerLevel.DEBUG, configColorScheme);\n      case NgxLoggerLevel.INFO:\n        return this.getColorFromConfig(NgxLoggerLevel.INFO, configColorScheme);\n      case NgxLoggerLevel.LOG:\n        return this.getColorFromConfig(NgxLoggerLevel.INFO, configColorScheme);\n      case NgxLoggerLevel.WARN:\n        return this.getColorFromConfig(NgxLoggerLevel.FATAL, configColorScheme);\n      case NgxLoggerLevel.ERROR:\n        return this.getColorFromConfig(NgxLoggerLevel.FATAL, configColorScheme);\n      case NgxLoggerLevel.FATAL:\n        return this.getColorFromConfig(NgxLoggerLevel.FATAL, configColorScheme);\n      case NgxLoggerLevel.OFF:\n      default:\n        return;\n    }\n  }\n\n  private static getColorFromConfig(level: number, configColorScheme: Array<string>): string | undefined {\n    if (!configColorScheme) {\n      return DEFAULT_COLOR_SCHEME[level];\n    }\n\n    return configColorScheme[level];\n  }\n\n  /**\n   *  This allows us to see who called the logger\n   */\n  static getCallerDetails(): { lineNumber: string, fileName: string } {\n    const err = (new Error(''));\n\n    try {\n      // this should produce the line which NGX Logger was called\n      const callerLine = err.stack.split('\\n')[4].split('/');\n\n      // returns the file:lineNumber\n      const fileLineNumber = callerLine[callerLine.length - 1].replace(/[)]/g, '').split(':');\n\n      return {\n        fileName: fileLineNumber[0],\n        lineNumber: fileLineNumber[1]\n      };\n    } catch (e) {\n      return {\n        fileName: null,\n        lineNumber: null\n      };\n    }\n\n  }\n\n  static prepareMessage(message) {\n    try {\n      if (typeof message !== 'string' && !(message instanceof Error)) {\n        message = JSON.stringify(message, null, 2);\n      }\n    } catch (e) {\n      // additional = [message, ...additional];\n      message = 'The provided \"message\" value could not be parsed with JSON.stringify().';\n    }\n\n    return message;\n  }\n\n  static prepareAdditionalParameters(additional: any[]) {\n    if (additional === null || additional === undefined) {\n      return null;\n    }\n\n    return additional.map((next, idx) => {\n      try {\n        // We just want to make sure the JSON can be parsed, we do not want to actually change the type\n        if (typeof next === 'object') {\n          JSON.stringify(next);\n        }\n\n        return next;\n      } catch (e) {\n        return `The additional[${idx}] value could not be parsed using JSON.stringify().`;\n      }\n    });\n  }\n\n}\n","export class LogPosition {\n  constructor(\n    public fileName: string,\n    public lineNumber: number,\n    public columnNumber: number\n  ) {}\n  toString() {\n    return this.fileName + ':' + this.lineNumber + ':' + this.columnNumber;\n  }\n}\n","import {SourceMap} from '@angular/compiler';\nimport {Injectable} from '@angular/core';\nimport {HttpBackend, HttpRequest, HttpResponse} from '@angular/common/http';\nimport * as vlq from 'vlq';\nimport {Observable, of} from 'rxjs';\nimport {catchError, filter, map, retry, shareReplay, switchMap} from 'rxjs/operators';\nimport {LogPosition} from './types/log-position';\n\n@Injectable()\nexport class NGXMapperService {\n\n  // cache for source maps, key is source map location, ie. 'http://localhost:4200/main.js.map'\n  private sourceMapCache: Map<string, Observable<SourceMap>> = new Map();\n\n  // cache for specific log position, key is the dist position, ie 'main.js:339:21'\n  private logPositionCache: Map<string, Observable<LogPosition>> = new Map();\n\n  constructor(private httpBackend: HttpBackend) {\n  }\n\n  /*\n  Static Functions\n */\n  private static getStackLine(): string {\n    const error = new Error();\n\n    try {\n      // noinspection ExceptionCaughtLocallyJS\n      throw error;\n    } catch (e) {\n\n      try {\n        return error.stack.split('\\n')[5];\n      } catch (e) {\n        return null;\n      }\n    }\n  }\n\n  private static getPosition(stackLine: string): LogPosition {\n    // strip base path, then parse filename, line, and column\n    const positionStartIndex = stackLine.lastIndexOf('\\/');\n    let positionEndIndex = stackLine.indexOf(')');\n    if (positionEndIndex < 0) {\n      positionEndIndex = undefined;\n    }\n\n    const position = stackLine.substring(positionStartIndex + 1, positionEndIndex);\n    const dataArray = position.split(':');\n    if (dataArray.length === 3) {\n      return new LogPosition(dataArray[0], +dataArray[1], +dataArray[2]);\n    }\n    return new LogPosition('unknown', 0, 0);\n  }\n\n  private static getTranspileLocation(stackLine: string): string {\n    let locationStartIndex = stackLine.indexOf('(');\n    if (locationStartIndex < 0) {\n      locationStartIndex = stackLine.lastIndexOf(' ');\n    }\n\n    let locationEndIndex = stackLine.indexOf(')');\n    if (locationEndIndex < 0) {\n      locationEndIndex = undefined;\n    }\n\n    return stackLine.substring(locationStartIndex + 1, locationEndIndex);\n  }\n\n  private static getMapFilePath(stackLine: string): string {\n    const file = NGXMapperService.getTranspileLocation(stackLine);\n    const mapFullPath = file.substring(0, file.lastIndexOf(':'));\n    return mapFullPath.substring(0, mapFullPath.lastIndexOf(':')) + '.map';\n  }\n\n  private static getMapping(sourceMap: SourceMap, position: LogPosition): LogPosition {\n    // => ';' indicates end of a line\n    // => ',' separates mappings in a line\n    // decoded mapping => [ generatedCodeColumn, sourceFileIndex, sourceCodeLine, sourceCodeColumn, nameIndex ]\n    let sourceFileIndex = 0,   // second field\n      sourceCodeLine = 0,    // third field\n      sourceCodeColumn = 0;  // fourth field\n\n    const lines = sourceMap.mappings.split(';');\n\n    for (let lineIndex = 0; lineIndex < lines.length; lineIndex++) {\n      // reset column position to 0 after each line\n      let generatedCodeColumn = 0;\n      // decode sections in line\n      const columns = lines[lineIndex].split(',');\n\n      for (let columnIndex = 0; columnIndex < columns.length; columnIndex++) {\n        const decodedSection = vlq.decode(columns[columnIndex]);\n        if (decodedSection.length >= 4) {\n          // update relative positions\n          generatedCodeColumn += decodedSection[0];\n          sourceFileIndex += decodedSection[1];\n          sourceCodeLine += decodedSection[2];\n          sourceCodeColumn += decodedSection[3];\n        }\n\n        // check if matching map\n        if (lineIndex === position.lineNumber) {\n          if (generatedCodeColumn === position.columnNumber) {\n            // matching column and line found\n            return new LogPosition(sourceMap.sources[sourceFileIndex], sourceCodeLine, sourceCodeColumn);\n          } else if (columnIndex + 1 === columns.length) {\n            // matching column not found, but line is correct\n            return new LogPosition(sourceMap.sources[sourceFileIndex], sourceCodeLine, 0);\n          }\n        }\n      }\n    }\n    // failed if reached\n    return new LogPosition('unknown', 0, 0);\n  }\n\n  /**\n   * does the http get request to get the source map\n   * @param sourceMapLocation\n   * @param distPosition\n   */\n  private _getSourceMap(sourceMapLocation: string, distPosition: LogPosition): Observable<LogPosition> {\n    const req = new HttpRequest<SourceMap>('GET', sourceMapLocation);\n    const distPositionKey = distPosition.toString();\n\n    // if the specific log position is already in cache return it\n    if (this.logPositionCache.has(distPositionKey)) {\n      return this.logPositionCache.get(distPositionKey);\n    }\n\n    // otherwise check if the source map is already cached for given source map location\n    if (!this.sourceMapCache.has(sourceMapLocation)) {\n      // obtain the source map if not cached\n      this.sourceMapCache.set(\n        sourceMapLocation,\n        this.httpBackend.handle(req).pipe(\n          filter((e) => e instanceof HttpResponse),\n          map<HttpResponse<SourceMap>, SourceMap>(\n            (httpResponse: HttpResponse<SourceMap>) => httpResponse.body\n          ),\n          retry(3),\n          shareReplay(1)\n        )\n      );\n    }\n\n    // at this point the source map is cached, use it to get specific log position mapping\n    const logPosition$ = this.sourceMapCache.get(sourceMapLocation).pipe(\n      map<SourceMap, LogPosition>((sourceMap) =>\n        // map generated position to source position\n        NGXMapperService.getMapping(sourceMap, distPosition)\n      ),\n      catchError(() => of(distPosition)),\n      shareReplay(1)\n    );\n\n    // store specific log position in cache for given dest position and return it\n    this.logPositionCache.set(distPositionKey, logPosition$);\n\n    return logPosition$;\n  }\n\n  /**\n   * Returns the LogPosition for the current log\n   * If sourceMaps are enabled, it attemps to get the source map from the server, and use that to parse the file name\n   * and number of the call\n   * @param sourceMapsEnabled\n   */\n  public getCallerDetails(sourceMapsEnabled: boolean): Observable<LogPosition> {\n    // parse generated file mapping from stack trace\n\n    const stackLine = NGXMapperService.getStackLine();\n\n    // if we were not able to parse the stackLine, just return an empty Log Position\n    if (!stackLine) {\n      return of(new LogPosition('', 0, 0));\n    }\n\n    return of([\n      NGXMapperService.getPosition(stackLine),\n      NGXMapperService.getMapFilePath(stackLine)\n    ]).pipe(\n      switchMap<[LogPosition, string], Observable<LogPosition>>(([distPosition, sourceMapLocation]) => {\n\n        // if source maps are not enabled, or if we've previously tried to get the source maps, but they failed,\n        // then just use the position of the JS instead of the source\n        if (!sourceMapsEnabled) {\n          return of(distPosition);\n        }\n\n        // finally try to get the source map and return the position\n        return this._getSourceMap(sourceMapLocation, distPosition);\n      })\n    );\n\n\n  }\n}\n\n\n\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { HttpErrorResponse, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { isPlatformBrowser, DatePipe } from '@angular/common';\n\nimport { NGXLoggerHttpService } from './http.service';\nimport { LogPosition } from './types/log-position';\nimport { NgxLoggerLevel } from './types/logger-level.enum';\nimport { LoggerConfig } from './logger.config';\nimport { NGXLoggerConfigEngine } from './config.engine';\nimport { NGXLoggerUtils } from './utils/logger.utils';\nimport { NGXLoggerMonitor } from './logger-monitor';\nimport { NGXLogInterface } from './types/ngx-log.interface';\nimport { NGXMapperService } from './mapper.service';\n\nexport const Levels = [\n  'TRACE',\n  'DEBUG',\n  'INFO',\n  'LOG',\n  'WARN',\n  'ERROR',\n  'FATAL',\n  'OFF'\n];\n\n\n@Injectable()\nexport class NGXLogger {\n  private readonly _isIE: boolean;\n  private readonly _logFunc: Function;\n  private config: NGXLoggerConfigEngine;\n  private _customHttpHeaders: HttpHeaders;\n  private _customParams: HttpParams;\n  private _withCredentials: boolean = false;\n\n  private _loggerMonitor: NGXLoggerMonitor;\n\n  constructor(private readonly mapperService: NGXMapperService, private readonly httpService: NGXLoggerHttpService,\n    loggerConfig: LoggerConfig, @Inject(PLATFORM_ID) private platformId,\n    private readonly datePipe: DatePipe) {\n    this._isIE = isPlatformBrowser(platformId) && navigator && navigator.userAgent &&\n      !!(navigator.userAgent.indexOf('MSIE') !== -1 || navigator.userAgent.match(/Trident\\//) || navigator.userAgent.match(/Edge\\//));\n\n    // each instance of the logger should have their own config engine\n    this.config = new NGXLoggerConfigEngine(loggerConfig);\n\n    this._logFunc = this._isIE ? this._logIE.bind(this) : this._logModern.bind(this);\n\n  }\n\n  public trace(message, ...additional: any[]): void {\n    this._log(NgxLoggerLevel.TRACE, message, additional);\n  }\n\n  public debug(message, ...additional: any[]): void {\n    this._log(NgxLoggerLevel.DEBUG, message, additional);\n  }\n\n  public info(message, ...additional: any[]): void {\n    this._log(NgxLoggerLevel.INFO, message, additional);\n  }\n\n  public log(message, ...additional: any[]): void {\n    this._log(NgxLoggerLevel.LOG, message, additional);\n  }\n\n  public warn(message, ...additional: any[]): void {\n    this._log(NgxLoggerLevel.WARN, message, additional);\n  }\n\n  public error(message, ...additional: any[]): void {\n    this._log(NgxLoggerLevel.ERROR, message, additional);\n  }\n\n  public fatal(message, ...additional: any[]): void {\n    this._log(NgxLoggerLevel.FATAL, message, additional);\n  }\n\n  public setCustomHttpHeaders(headers: HttpHeaders) {\n    this._customHttpHeaders = headers;\n  }\n\n  public setCustomParams(params: HttpParams) {\n    this._customParams = params;\n  }\n\n  public setWithCredentialsOptionValue(withCredentials: boolean) {\n    this._withCredentials = withCredentials;\n  }\n\n  public registerMonitor(monitor: NGXLoggerMonitor) {\n    this._loggerMonitor = monitor;\n  }\n\n  public updateConfig(config: LoggerConfig) {\n    this.config.updateConfig(config);\n  }\n\n  public getConfigSnapshot(): LoggerConfig {\n    return this.config.getConfig();\n  }\n\n  private _logIE(level: NgxLoggerLevel, metaString: string, message: string, additional: any[]): void {\n\n    // Coloring doesn't work in IE\n    // make sure additional isn't null or undefined so that ...additional doesn't error\n    additional = additional || [];\n\n    switch (level) {\n      case NgxLoggerLevel.WARN:\n        console.warn(`${metaString} `, message, ...additional);\n        break;\n      case NgxLoggerLevel.ERROR:\n      case NgxLoggerLevel.FATAL:\n        console.error(`${metaString} `, message, ...additional);\n        break;\n      case NgxLoggerLevel.INFO:\n        console.info(`${metaString} `, message, ...additional);\n        break;\n      default:\n        console.log(`${metaString} `, message, ...additional);\n    }\n  }\n\n  private _logModern(level: NgxLoggerLevel, metaString: string, message: string, additional: any[]): void {\n    const configuredColors = this.getConfigSnapshot().colorScheme;\n    const color = NGXLoggerUtils.getColor(level, configuredColors);\n\n    // make sure additional isn't null or undefined so that ...additional doesn't error\n    additional = additional || [];\n\n    switch (level) {\n      case NgxLoggerLevel.WARN:\n        console.warn(`%c${metaString}`, `color:${color}`, message, ...additional);\n        break;\n      case NgxLoggerLevel.ERROR:\n      case NgxLoggerLevel.FATAL:\n        console.error(`%c${metaString}`, `color:${color}`, message, ...additional);\n        break;\n      case NgxLoggerLevel.INFO:\n        console.info(`%c${metaString}`, `color:${color}`, message, ...additional);\n        break;\n      //  Disabling console.trace since the stack trace is not helpful. it is showing the stack trace of\n      // the console.trace statement\n      // case NgxLoggerLevel.TRACE:\n      //   console.trace(`%c${metaString}`, `color:${color}`, message, ...additional);\n      //   break;\n\n      //  Disabling console.debug, because Has this hidden by default.\n      // case NgxLoggerLevel.DEBUG:\n      //   console.debug(`%c${metaString}`, `color:${color}`, message, ...additional);\n      //   break;\n      default:\n        console.log(`%c${metaString}`, `color:${color}`, message, ...additional);\n    }\n  }\n\n  private _log(level: NgxLoggerLevel, message, additional: any[] = [], logOnServer: boolean = true): void {\n    const config = this.config.getConfig();\n    const isLog2Server = logOnServer && config.serverLoggingUrl && level >= config.serverLogLevel;\n    const isLogLevelEnabled = level >= config.level;\n\n    if (!(message && (isLog2Server || isLogLevelEnabled))) {\n      return;\n    }\n\n    const logLevelString = Levels[level];\n\n    message = typeof message === 'function' ? message() : message;\n    message = NGXLoggerUtils.prepareMessage(message);\n\n    // only use validated parameters for HTTP requests\n    const validatedAdditionalParameters = NGXLoggerUtils.prepareAdditionalParameters(additional);\n\n    const timestamp = config.timestampFormat ?\n      this.datePipe.transform(new Date(), config.timestampFormat) :\n      new Date().toISOString();\n\n    // const callerDetails = NGXLoggerUtils.getCallerDetails();\n    this.mapperService.getCallerDetails(config.enableSourceMaps).subscribe((callerDetails: LogPosition) => {\n      const logObject: NGXLogInterface = {\n        message: message,\n        additional: validatedAdditionalParameters,\n        level: level,\n        timestamp: timestamp,\n        fileName: callerDetails.fileName,\n        lineNumber: callerDetails.lineNumber.toString()\n      };\n\n      if (this._loggerMonitor && isLogLevelEnabled) {\n        this._loggerMonitor.onLog(logObject);\n      }\n\n      if (isLog2Server) {\n        // make sure the stack gets sent to the server\n        message = message instanceof Error ? message.stack : message;\n        logObject.message = message;\n\n        const headers = this._customHttpHeaders || new HttpHeaders();\n        headers.set('Content-Type', 'application/json');\n\n        const options = {\n          headers: headers,\n          params: this._customParams || new HttpParams(),\n          responseType: config.httpResponseType || 'json',\n          withCredentials: this._withCredentials\n        };\n        // Allow logging on server even if client log level is off\n        this.httpService.logOnServer(config.serverLoggingUrl, logObject, options).subscribe((res: any) => {\n          // I don't think we should do anything on success\n        },\n          (error: HttpErrorResponse) => {\n            this._log(NgxLoggerLevel.ERROR, `FAILED TO LOG ON SERVER: ${message}`, [error], false);\n          }\n        );\n      }\n\n\n      // if no message or the log level is less than the environ\n      if (isLogLevelEnabled && !config.disableConsoleLogging) {\n        const metaString = NGXLoggerUtils.prepareMetaString(timestamp, logLevelString,\n          callerDetails.fileName, callerDetails.lineNumber.toString());\n\n        return this._logFunc(level, metaString, message, additional);\n      }\n    });\n  }\n}\n","import {Inject, Injectable, PLATFORM_ID} from '@angular/core';\nimport { DatePipe } from '@angular/common';\n\nimport {LoggerConfig} from './logger.config';\nimport {NGXLoggerHttpService} from './http.service';\nimport {NGXLogger} from './logger.service';\nimport {NGXLoggerMonitor} from './logger-monitor';\nimport {NGXMapperService} from './mapper.service';\n\n\n/**\n * CustomNGXLoggerService is designed to allow users to get a new instance of a logger\n */\n@Injectable()\nexport class CustomNGXLoggerService {\n\n  constructor(private readonly mapperService: NGXMapperService,\n              private readonly httpService: NGXLoggerHttpService,\n              @Inject(PLATFORM_ID) private readonly platformId, private readonly datePipe: DatePipe) {\n  }\n\n  create(config: LoggerConfig, httpService?: NGXLoggerHttpService, logMonitor?: NGXLoggerMonitor,\n         mapperService?: NGXMapperService): NGXLogger {\n    // you can inject your own httpService or use the default,\n    const logger = new NGXLogger(mapperService || this.mapperService,\n      httpService || this.httpService, config, this.platformId, this.datePipe);\n\n    if (logMonitor) {\n      logger.registerMonitor(logMonitor);\n    }\n\n    return logger;\n  }\n}\n\n","import {CommonModule, DatePipe} from '@angular/common';\nimport {ModuleWithProviders, NgModule} from '@angular/core';\n\nimport {NGXLogger} from './logger.service';\nimport {LoggerConfig} from './logger.config';\nimport {CustomNGXLoggerService} from './custom-logger.service';\nimport {NGXLoggerHttpService} from './http.service';\nimport {NGXMapperService} from './mapper.service';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  providers: [\n    NGXLogger,\n    NGXLoggerHttpService,\n    CustomNGXLoggerService,\n    NGXMapperService,\n    DatePipe\n  ]\n})\nexport class LoggerModule {\n  static forRoot(config: LoggerConfig | null | undefined): ModuleWithProviders<LoggerModule> {\n    return {\n      ngModule: LoggerModule,\n      providers: [\n        {provide: LoggerConfig, useValue: config || {}},\n        NGXLogger,\n        NGXLoggerHttpService,\n        CustomNGXLoggerService,\n        NGXMapperService\n      ]\n    };\n  }\n  static forChild(): ModuleWithProviders<LoggerModule> {\n    return {\n      ngModule: LoggerModule,\n      providers: [\n        NGXLogger,\n        NGXLoggerHttpService,\n        CustomNGXLoggerService,\n        NGXMapperService\n      ]\n    };\n  }\n}\n","import {NGXLogInterface} from './types/ngx-log.interface';\n\nexport abstract class NGXLoggerMonitor {\n  abstract onLog(logObject: NGXLogInterface): void;\n}\n","import {NgxLoggerLevel} from './logger-level.enum';\n\nexport class NGXLogInterface {\n  level: NgxLoggerLevel;\n  timestamp: string;\n  fileName: string;\n  lineNumber: string;\n  message: string;\n  additional: any[];\n}\n"]}