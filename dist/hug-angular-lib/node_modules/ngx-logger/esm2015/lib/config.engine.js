/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { LoggerConfig } from './logger.config';
export class NGXLoggerConfigEngine {
    /**
     * @param {?} config
     */
    constructor(config) {
        this.config = config;
        this._config = config;
    }
    /**
     * @param {?} config
     * @return {?}
     */
    updateConfig(config) {
        this._config = this._clone(config);
    }
    /**
     * @return {?}
     */
    getConfig() {
        return this._clone(this._config);
    }
    // TODO: add tests around cloning the config. updating an object passed into the config (or retrieving from the config)
    // should not update the active config, this is a shallow clone. If our config ever becomes hierarchical we must make
    // this a deep clone
    /**
     * @private
     * @param {?} object
     * @return {?}
     */
    _clone(object) {
        /** @type {?} */
        const cloneConfig = new LoggerConfig();
        Object.keys(object).forEach((/**
         * @param {?} key
         * @return {?}
         */
        (key) => {
            cloneConfig[key] = object[key];
        }));
        return cloneConfig;
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    NGXLoggerConfigEngine.prototype._config;
    /** @type {?} */
    NGXLoggerConfigEngine.prototype.config;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlnLmVuZ2luZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1sb2dnZXIvIiwic291cmNlcyI6WyJsaWIvY29uZmlnLmVuZ2luZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBRTdDLE1BQU0sT0FBTyxxQkFBcUI7Ozs7SUFHaEMsWUFBcUIsTUFBb0I7UUFBcEIsV0FBTSxHQUFOLE1BQU0sQ0FBYztRQUN2QyxJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQztJQUN4QixDQUFDOzs7OztJQUVELFlBQVksQ0FBQyxNQUFvQjtRQUMvQixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDckMsQ0FBQzs7OztJQUVELFNBQVM7UUFDUCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ25DLENBQUM7Ozs7Ozs7OztJQUtPLE1BQU0sQ0FBQyxNQUFXOztjQUNsQixXQUFXLEdBQWlCLElBQUksWUFBWSxFQUFFO1FBRXBELE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTzs7OztRQUFDLENBQUMsR0FBRyxFQUFFLEVBQUU7WUFDbEMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNqQyxDQUFDLEVBQUMsQ0FBQztRQUVILE9BQU8sV0FBVyxDQUFDO0lBQ3JCLENBQUM7Q0FDRjs7Ozs7O0lBekJDLHdDQUFnQjs7SUFDSix1Q0FBNkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0xvZ2dlckNvbmZpZ30gZnJvbSAnLi9sb2dnZXIuY29uZmlnJztcblxuZXhwb3J0IGNsYXNzIE5HWExvZ2dlckNvbmZpZ0VuZ2luZSB7XG5cbiAgcHJpdmF0ZSBfY29uZmlnO1xuICBjb25zdHJ1Y3RvcihyZWFkb25seSBjb25maWc6IExvZ2dlckNvbmZpZykge1xuICAgIHRoaXMuX2NvbmZpZyA9IGNvbmZpZztcbiAgfVxuXG4gIHVwZGF0ZUNvbmZpZyhjb25maWc6IExvZ2dlckNvbmZpZykge1xuICAgIHRoaXMuX2NvbmZpZyA9IHRoaXMuX2Nsb25lKGNvbmZpZyk7XG4gIH1cblxuICBnZXRDb25maWcoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2Nsb25lKHRoaXMuX2NvbmZpZyk7XG4gIH1cblxuICAvLyBUT0RPOiBhZGQgdGVzdHMgYXJvdW5kIGNsb25pbmcgdGhlIGNvbmZpZy4gdXBkYXRpbmcgYW4gb2JqZWN0IHBhc3NlZCBpbnRvIHRoZSBjb25maWcgKG9yIHJldHJpZXZpbmcgZnJvbSB0aGUgY29uZmlnKVxuICAvLyBzaG91bGQgbm90IHVwZGF0ZSB0aGUgYWN0aXZlIGNvbmZpZywgdGhpcyBpcyBhIHNoYWxsb3cgY2xvbmUuIElmIG91ciBjb25maWcgZXZlciBiZWNvbWVzIGhpZXJhcmNoaWNhbCB3ZSBtdXN0IG1ha2VcbiAgLy8gdGhpcyBhIGRlZXAgY2xvbmVcbiAgcHJpdmF0ZSBfY2xvbmUob2JqZWN0OiBhbnkpIHtcbiAgICBjb25zdCBjbG9uZUNvbmZpZzogTG9nZ2VyQ29uZmlnID0gbmV3IExvZ2dlckNvbmZpZygpO1xuXG4gICAgT2JqZWN0LmtleXMob2JqZWN0KS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgIGNsb25lQ29uZmlnW2tleV0gPSBvYmplY3Rba2V5XTtcbiAgICB9KTtcblxuICAgIHJldHVybiBjbG9uZUNvbmZpZztcbiAgfVxufVxuIl19