import { HttpHeaders, HttpParams } from '@angular/common/http';
import { DatePipe } from '@angular/common';
import { NGXLoggerHttpService } from './http.service';
import { LoggerConfig } from './logger.config';
import { NGXLoggerMonitor } from './logger-monitor';
import { NGXMapperService } from './mapper.service';
import * as ɵngcc0 from '@angular/core';
export declare const Levels: string[];
export declare class NGXLogger {
    private readonly mapperService;
    private readonly httpService;
    private platformId;
    private readonly datePipe;
    private readonly _isIE;
    private readonly _logFunc;
    private config;
    private _customHttpHeaders;
    private _customParams;
    private _withCredentials;
    private _loggerMonitor;
    constructor(mapperService: NGXMapperService, httpService: NGXLoggerHttpService, loggerConfig: LoggerConfig, platformId: any, datePipe: DatePipe);
    trace(message: any, ...additional: any[]): void;
    debug(message: any, ...additional: any[]): void;
    info(message: any, ...additional: any[]): void;
    log(message: any, ...additional: any[]): void;
    warn(message: any, ...additional: any[]): void;
    error(message: any, ...additional: any[]): void;
    fatal(message: any, ...additional: any[]): void;
    setCustomHttpHeaders(headers: HttpHeaders): void;
    setCustomParams(params: HttpParams): void;
    setWithCredentialsOptionValue(withCredentials: boolean): void;
    registerMonitor(monitor: NGXLoggerMonitor): void;
    updateConfig(config: LoggerConfig): void;
    getConfigSnapshot(): LoggerConfig;
    private _logIE;
    private _logModern;
    private _log;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NGXLogger, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<NGXLogger>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2VyLnNlcnZpY2UuZC50cyIsInNvdXJjZXMiOlsibG9nZ2VyLnNlcnZpY2UuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEh0dHBIZWFkZXJzLCBIdHRwUGFyYW1zIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgRGF0ZVBpcGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgTkdYTG9nZ2VySHR0cFNlcnZpY2UgfSBmcm9tICcuL2h0dHAuc2VydmljZSc7XG5pbXBvcnQgeyBMb2dnZXJDb25maWcgfSBmcm9tICcuL2xvZ2dlci5jb25maWcnO1xuaW1wb3J0IHsgTkdYTG9nZ2VyTW9uaXRvciB9IGZyb20gJy4vbG9nZ2VyLW1vbml0b3InO1xuaW1wb3J0IHsgTkdYTWFwcGVyU2VydmljZSB9IGZyb20gJy4vbWFwcGVyLnNlcnZpY2UnO1xuZXhwb3J0IGRlY2xhcmUgY29uc3QgTGV2ZWxzOiBzdHJpbmdbXTtcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE5HWExvZ2dlciB7XG4gICAgcHJpdmF0ZSByZWFkb25seSBtYXBwZXJTZXJ2aWNlO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgaHR0cFNlcnZpY2U7XG4gICAgcHJpdmF0ZSBwbGF0Zm9ybUlkO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgZGF0ZVBpcGU7XG4gICAgcHJpdmF0ZSByZWFkb25seSBfaXNJRTtcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9sb2dGdW5jO1xuICAgIHByaXZhdGUgY29uZmlnO1xuICAgIHByaXZhdGUgX2N1c3RvbUh0dHBIZWFkZXJzO1xuICAgIHByaXZhdGUgX2N1c3RvbVBhcmFtcztcbiAgICBwcml2YXRlIF93aXRoQ3JlZGVudGlhbHM7XG4gICAgcHJpdmF0ZSBfbG9nZ2VyTW9uaXRvcjtcbiAgICBjb25zdHJ1Y3RvcihtYXBwZXJTZXJ2aWNlOiBOR1hNYXBwZXJTZXJ2aWNlLCBodHRwU2VydmljZTogTkdYTG9nZ2VySHR0cFNlcnZpY2UsIGxvZ2dlckNvbmZpZzogTG9nZ2VyQ29uZmlnLCBwbGF0Zm9ybUlkOiBhbnksIGRhdGVQaXBlOiBEYXRlUGlwZSk7XG4gICAgdHJhY2UobWVzc2FnZTogYW55LCAuLi5hZGRpdGlvbmFsOiBhbnlbXSk6IHZvaWQ7XG4gICAgZGVidWcobWVzc2FnZTogYW55LCAuLi5hZGRpdGlvbmFsOiBhbnlbXSk6IHZvaWQ7XG4gICAgaW5mbyhtZXNzYWdlOiBhbnksIC4uLmFkZGl0aW9uYWw6IGFueVtdKTogdm9pZDtcbiAgICBsb2cobWVzc2FnZTogYW55LCAuLi5hZGRpdGlvbmFsOiBhbnlbXSk6IHZvaWQ7XG4gICAgd2FybihtZXNzYWdlOiBhbnksIC4uLmFkZGl0aW9uYWw6IGFueVtdKTogdm9pZDtcbiAgICBlcnJvcihtZXNzYWdlOiBhbnksIC4uLmFkZGl0aW9uYWw6IGFueVtdKTogdm9pZDtcbiAgICBmYXRhbChtZXNzYWdlOiBhbnksIC4uLmFkZGl0aW9uYWw6IGFueVtdKTogdm9pZDtcbiAgICBzZXRDdXN0b21IdHRwSGVhZGVycyhoZWFkZXJzOiBIdHRwSGVhZGVycyk6IHZvaWQ7XG4gICAgc2V0Q3VzdG9tUGFyYW1zKHBhcmFtczogSHR0cFBhcmFtcyk6IHZvaWQ7XG4gICAgc2V0V2l0aENyZWRlbnRpYWxzT3B0aW9uVmFsdWUod2l0aENyZWRlbnRpYWxzOiBib29sZWFuKTogdm9pZDtcbiAgICByZWdpc3Rlck1vbml0b3IobW9uaXRvcjogTkdYTG9nZ2VyTW9uaXRvcik6IHZvaWQ7XG4gICAgdXBkYXRlQ29uZmlnKGNvbmZpZzogTG9nZ2VyQ29uZmlnKTogdm9pZDtcbiAgICBnZXRDb25maWdTbmFwc2hvdCgpOiBMb2dnZXJDb25maWc7XG4gICAgcHJpdmF0ZSBfbG9nSUU7XG4gICAgcHJpdmF0ZSBfbG9nTW9kZXJuO1xuICAgIHByaXZhdGUgX2xvZztcbn1cbiJdfQ==