/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { LoggerConfig } from 'ngx-logger';
var NGXLoggerMock = /** @class */ (function () {
    function NGXLoggerMock() {
    }
    /**
     * @param {?} message
     * @param {...?} additional
     * @return {?}
     */
    NGXLoggerMock.prototype.trace = /**
     * @param {?} message
     * @param {...?} additional
     * @return {?}
     */
    function (message) {
        var additional = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            additional[_i - 1] = arguments[_i];
        }
    };
    /**
     * @param {?} message
     * @param {...?} additional
     * @return {?}
     */
    NGXLoggerMock.prototype.debug = /**
     * @param {?} message
     * @param {...?} additional
     * @return {?}
     */
    function (message) {
        var additional = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            additional[_i - 1] = arguments[_i];
        }
    };
    /**
     * @param {?} message
     * @param {...?} additional
     * @return {?}
     */
    NGXLoggerMock.prototype.info = /**
     * @param {?} message
     * @param {...?} additional
     * @return {?}
     */
    function (message) {
        var additional = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            additional[_i - 1] = arguments[_i];
        }
    };
    /**
     * @param {?} message
     * @param {...?} additional
     * @return {?}
     */
    NGXLoggerMock.prototype.log = /**
     * @param {?} message
     * @param {...?} additional
     * @return {?}
     */
    function (message) {
        var additional = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            additional[_i - 1] = arguments[_i];
        }
    };
    /**
     * @param {?} message
     * @param {...?} additional
     * @return {?}
     */
    NGXLoggerMock.prototype.warn = /**
     * @param {?} message
     * @param {...?} additional
     * @return {?}
     */
    function (message) {
        var additional = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            additional[_i - 1] = arguments[_i];
        }
    };
    /**
     * @param {?} message
     * @param {...?} additional
     * @return {?}
     */
    NGXLoggerMock.prototype.error = /**
     * @param {?} message
     * @param {...?} additional
     * @return {?}
     */
    function (message) {
        var additional = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            additional[_i - 1] = arguments[_i];
        }
    };
    /**
     * @param {?} message
     * @param {...?} additional
     * @return {?}
     */
    NGXLoggerMock.prototype.fatal = /**
     * @param {?} message
     * @param {...?} additional
     * @return {?}
     */
    function (message) {
        var additional = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            additional[_i - 1] = arguments[_i];
        }
    };
    /**
     * @param {?} config
     * @return {?}
     */
    NGXLoggerMock.prototype.updateConfig = /**
     * @param {?} config
     * @return {?}
     */
    function (config) {
    };
    /**
     * @param {?} headers
     * @return {?}
     */
    NGXLoggerMock.prototype.setCustomHttpHeaders = /**
     * @param {?} headers
     * @return {?}
     */
    function (headers) {
    };
    /**
     * @param {?} params
     * @return {?}
     */
    NGXLoggerMock.prototype.setCustomParams = /**
     * @param {?} params
     * @return {?}
     */
    function (params) {
    };
    /**
     * @param {?} monitor
     * @return {?}
     */
    NGXLoggerMock.prototype.registerMonitor = /**
     * @param {?} monitor
     * @return {?}
     */
    function (monitor) {
    };
    /**
     * @param {?} withCredentials
     * @return {?}
     */
    NGXLoggerMock.prototype.setWithCredentialsOptionValue = /**
     * @param {?} withCredentials
     * @return {?}
     */
    function (withCredentials) {
    };
    /**
     * @return {?}
     */
    NGXLoggerMock.prototype.getConfigSnapshot = /**
     * @return {?}
     */
    function () {
        return new LoggerConfig();
    };
    return NGXLoggerMock;
}());
export { NGXLoggerMock };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2VyLnNlcnZpY2UubW9jay5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1sb2dnZXIvdGVzdGluZy8iLCJzb3VyY2VzIjpbImxpYi9sb2dnZXIuc2VydmljZS5tb2NrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFDQSxPQUFPLEVBQUMsWUFBWSxFQUFtQixNQUFNLFlBQVksQ0FBQztBQUUxRDtJQUVFO0lBQ0EsQ0FBQzs7Ozs7O0lBRUQsNkJBQUs7Ozs7O0lBQUwsVUFBTSxPQUFZO1FBQUUsb0JBQW9CO2FBQXBCLFVBQW9CLEVBQXBCLHFCQUFvQixFQUFwQixJQUFvQjtZQUFwQixtQ0FBb0I7O0lBQ3hDLENBQUM7Ozs7OztJQUVELDZCQUFLOzs7OztJQUFMLFVBQU0sT0FBWTtRQUFFLG9CQUFvQjthQUFwQixVQUFvQixFQUFwQixxQkFBb0IsRUFBcEIsSUFBb0I7WUFBcEIsbUNBQW9COztJQUN4QyxDQUFDOzs7Ozs7SUFFRCw0QkFBSTs7Ozs7SUFBSixVQUFLLE9BQVk7UUFBRSxvQkFBb0I7YUFBcEIsVUFBb0IsRUFBcEIscUJBQW9CLEVBQXBCLElBQW9CO1lBQXBCLG1DQUFvQjs7SUFDdkMsQ0FBQzs7Ozs7O0lBRUQsMkJBQUc7Ozs7O0lBQUgsVUFBSSxPQUFZO1FBQUUsb0JBQW9CO2FBQXBCLFVBQW9CLEVBQXBCLHFCQUFvQixFQUFwQixJQUFvQjtZQUFwQixtQ0FBb0I7O0lBQ3RDLENBQUM7Ozs7OztJQUVELDRCQUFJOzs7OztJQUFKLFVBQUssT0FBWTtRQUFFLG9CQUFvQjthQUFwQixVQUFvQixFQUFwQixxQkFBb0IsRUFBcEIsSUFBb0I7WUFBcEIsbUNBQW9COztJQUN2QyxDQUFDOzs7Ozs7SUFFRCw2QkFBSzs7Ozs7SUFBTCxVQUFNLE9BQVk7UUFBRSxvQkFBb0I7YUFBcEIsVUFBb0IsRUFBcEIscUJBQW9CLEVBQXBCLElBQW9CO1lBQXBCLG1DQUFvQjs7SUFDeEMsQ0FBQzs7Ozs7O0lBRUQsNkJBQUs7Ozs7O0lBQUwsVUFBTSxPQUFZO1FBQUUsb0JBQW9CO2FBQXBCLFVBQW9CLEVBQXBCLHFCQUFvQixFQUFwQixJQUFvQjtZQUFwQixtQ0FBb0I7O0lBQ3hDLENBQUM7Ozs7O0lBRUQsb0NBQVk7Ozs7SUFBWixVQUFhLE1BQVc7SUFFeEIsQ0FBQzs7Ozs7SUFFRCw0Q0FBb0I7Ozs7SUFBcEIsVUFBcUIsT0FBb0I7SUFDekMsQ0FBQzs7Ozs7SUFFRCx1Q0FBZTs7OztJQUFmLFVBQWdCLE1BQWtCO0lBQ2xDLENBQUM7Ozs7O0lBRUQsdUNBQWU7Ozs7SUFBZixVQUFnQixPQUF5QjtJQUN6QyxDQUFDOzs7OztJQUVELHFEQUE2Qjs7OztJQUE3QixVQUE4QixlQUF3QjtJQUN0RCxDQUFDOzs7O0lBRUQseUNBQWlCOzs7SUFBakI7UUFDRSxPQUFPLElBQUksWUFBWSxFQUFFLENBQUM7SUFDNUIsQ0FBQztJQUNILG9CQUFDO0FBQUQsQ0FBQyxBQTdDRCxJQTZDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SHR0cEhlYWRlcnMsIEh0dHBQYXJhbXN9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7TG9nZ2VyQ29uZmlnLCBOR1hMb2dnZXJNb25pdG9yfSBmcm9tICduZ3gtbG9nZ2VyJztcblxuZXhwb3J0IGNsYXNzIE5HWExvZ2dlck1vY2sge1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICB9XG5cbiAgdHJhY2UobWVzc2FnZTogYW55LCAuLi5hZGRpdGlvbmFsOiBhbnlbXSkge1xuICB9XG5cbiAgZGVidWcobWVzc2FnZTogYW55LCAuLi5hZGRpdGlvbmFsOiBhbnlbXSkge1xuICB9XG5cbiAgaW5mbyhtZXNzYWdlOiBhbnksIC4uLmFkZGl0aW9uYWw6IGFueVtdKSB7XG4gIH1cblxuICBsb2cobWVzc2FnZTogYW55LCAuLi5hZGRpdGlvbmFsOiBhbnlbXSkge1xuICB9XG5cbiAgd2FybihtZXNzYWdlOiBhbnksIC4uLmFkZGl0aW9uYWw6IGFueVtdKSB7XG4gIH1cblxuICBlcnJvcihtZXNzYWdlOiBhbnksIC4uLmFkZGl0aW9uYWw6IGFueVtdKSB7XG4gIH1cblxuICBmYXRhbChtZXNzYWdlOiBhbnksIC4uLmFkZGl0aW9uYWw6IGFueVtdKSB7XG4gIH1cblxuICB1cGRhdGVDb25maWcoY29uZmlnOiBhbnkpIHtcblxuICB9XG5cbiAgc2V0Q3VzdG9tSHR0cEhlYWRlcnMoaGVhZGVyczogSHR0cEhlYWRlcnMpIHtcbiAgfVxuXG4gIHNldEN1c3RvbVBhcmFtcyhwYXJhbXM6IEh0dHBQYXJhbXMpIHtcbiAgfVxuXG4gIHJlZ2lzdGVyTW9uaXRvcihtb25pdG9yOiBOR1hMb2dnZXJNb25pdG9yKSB7XG4gIH1cblxuICBzZXRXaXRoQ3JlZGVudGlhbHNPcHRpb25WYWx1ZSh3aXRoQ3JlZGVudGlhbHM6IGJvb2xlYW4pIHtcbiAgfVxuXG4gIGdldENvbmZpZ1NuYXBzaG90KCk6IExvZ2dlckNvbmZpZyB7XG4gICAgcmV0dXJuIG5ldyBMb2dnZXJDb25maWcoKTtcbiAgfVxufVxuIl19