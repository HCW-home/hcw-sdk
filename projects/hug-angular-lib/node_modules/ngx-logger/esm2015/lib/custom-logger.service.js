/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Inject, Injectable, PLATFORM_ID } from '@angular/core';
import { DatePipe } from '@angular/common';
import { NGXLoggerHttpService } from './http.service';
import { NGXLogger } from './logger.service';
import { NGXMapperService } from './mapper.service';
/**
 * CustomNGXLoggerService is designed to allow users to get a new instance of a logger
 */
export class CustomNGXLoggerService {
    /**
     * @param {?} mapperService
     * @param {?} httpService
     * @param {?} platformId
     * @param {?} datePipe
     */
    constructor(mapperService, httpService, platformId, datePipe) {
        this.mapperService = mapperService;
        this.httpService = httpService;
        this.platformId = platformId;
        this.datePipe = datePipe;
    }
    /**
     * @param {?} config
     * @param {?=} httpService
     * @param {?=} logMonitor
     * @param {?=} mapperService
     * @return {?}
     */
    create(config, httpService, logMonitor, mapperService) {
        // you can inject your own httpService or use the default,
        /** @type {?} */
        const logger = new NGXLogger(mapperService || this.mapperService, httpService || this.httpService, config, this.platformId, this.datePipe);
        if (logMonitor) {
            logger.registerMonitor(logMonitor);
        }
        return logger;
    }
}
CustomNGXLoggerService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
CustomNGXLoggerService.ctorParameters = () => [
    { type: NGXMapperService },
    { type: NGXLoggerHttpService },
    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
    { type: DatePipe }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    CustomNGXLoggerService.prototype.mapperService;
    /**
     * @type {?}
     * @private
     */
    CustomNGXLoggerService.prototype.httpService;
    /**
     * @type {?}
     * @private
     */
    CustomNGXLoggerService.prototype.platformId;
    /**
     * @type {?}
     * @private
     */
    CustomNGXLoggerService.prototype.datePipe;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3VzdG9tLWxvZ2dlci5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWxvZ2dlci8iLCJzb3VyY2VzIjpbImxpYi9jdXN0b20tbG9nZ2VyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyxNQUFNLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUM5RCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFHM0MsT0FBTyxFQUFDLG9CQUFvQixFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFDcEQsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLGtCQUFrQixDQUFDO0FBRTNDLE9BQU8sRUFBQyxnQkFBZ0IsRUFBQyxNQUFNLGtCQUFrQixDQUFDOzs7O0FBT2xELE1BQU0sT0FBTyxzQkFBc0I7Ozs7Ozs7SUFFakMsWUFBNkIsYUFBK0IsRUFDL0IsV0FBaUMsRUFDWixVQUFVLEVBQW1CLFFBQWtCO1FBRnBFLGtCQUFhLEdBQWIsYUFBYSxDQUFrQjtRQUMvQixnQkFBVyxHQUFYLFdBQVcsQ0FBc0I7UUFDWixlQUFVLEdBQVYsVUFBVSxDQUFBO1FBQW1CLGFBQVEsR0FBUixRQUFRLENBQVU7SUFDakcsQ0FBQzs7Ozs7Ozs7SUFFRCxNQUFNLENBQUMsTUFBb0IsRUFBRSxXQUFrQyxFQUFFLFVBQTZCLEVBQ3ZGLGFBQWdDOzs7Y0FFL0IsTUFBTSxHQUFHLElBQUksU0FBUyxDQUFDLGFBQWEsSUFBSSxJQUFJLENBQUMsYUFBYSxFQUM5RCxXQUFXLElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDO1FBRTFFLElBQUksVUFBVSxFQUFFO1lBQ2QsTUFBTSxDQUFDLGVBQWUsQ0FBQyxVQUFVLENBQUMsQ0FBQztTQUNwQztRQUVELE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7OztZQW5CRixVQUFVOzs7O1lBTkgsZ0JBQWdCO1lBSGhCLG9CQUFvQjs0Q0FjYixNQUFNLFNBQUMsV0FBVztZQWpCeEIsUUFBUTs7Ozs7OztJQWVILCtDQUFnRDs7Ozs7SUFDaEQsNkNBQWtEOzs7OztJQUNsRCw0Q0FBZ0Q7Ozs7O0lBQUUsMENBQW1DIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbmplY3QsIEluamVjdGFibGUsIFBMQVRGT1JNX0lEfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IERhdGVQaXBlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcblxuaW1wb3J0IHtMb2dnZXJDb25maWd9IGZyb20gJy4vbG9nZ2VyLmNvbmZpZyc7XG5pbXBvcnQge05HWExvZ2dlckh0dHBTZXJ2aWNlfSBmcm9tICcuL2h0dHAuc2VydmljZSc7XG5pbXBvcnQge05HWExvZ2dlcn0gZnJvbSAnLi9sb2dnZXIuc2VydmljZSc7XG5pbXBvcnQge05HWExvZ2dlck1vbml0b3J9IGZyb20gJy4vbG9nZ2VyLW1vbml0b3InO1xuaW1wb3J0IHtOR1hNYXBwZXJTZXJ2aWNlfSBmcm9tICcuL21hcHBlci5zZXJ2aWNlJztcblxuXG4vKipcbiAqIEN1c3RvbU5HWExvZ2dlclNlcnZpY2UgaXMgZGVzaWduZWQgdG8gYWxsb3cgdXNlcnMgdG8gZ2V0IGEgbmV3IGluc3RhbmNlIG9mIGEgbG9nZ2VyXG4gKi9cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBDdXN0b21OR1hMb2dnZXJTZXJ2aWNlIHtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IG1hcHBlclNlcnZpY2U6IE5HWE1hcHBlclNlcnZpY2UsXG4gICAgICAgICAgICAgIHByaXZhdGUgcmVhZG9ubHkgaHR0cFNlcnZpY2U6IE5HWExvZ2dlckh0dHBTZXJ2aWNlLFxuICAgICAgICAgICAgICBASW5qZWN0KFBMQVRGT1JNX0lEKSBwcml2YXRlIHJlYWRvbmx5IHBsYXRmb3JtSWQsIHByaXZhdGUgcmVhZG9ubHkgZGF0ZVBpcGU6IERhdGVQaXBlKSB7XG4gIH1cblxuICBjcmVhdGUoY29uZmlnOiBMb2dnZXJDb25maWcsIGh0dHBTZXJ2aWNlPzogTkdYTG9nZ2VySHR0cFNlcnZpY2UsIGxvZ01vbml0b3I/OiBOR1hMb2dnZXJNb25pdG9yLFxuICAgICAgICAgbWFwcGVyU2VydmljZT86IE5HWE1hcHBlclNlcnZpY2UpOiBOR1hMb2dnZXIge1xuICAgIC8vIHlvdSBjYW4gaW5qZWN0IHlvdXIgb3duIGh0dHBTZXJ2aWNlIG9yIHVzZSB0aGUgZGVmYXVsdCxcbiAgICBjb25zdCBsb2dnZXIgPSBuZXcgTkdYTG9nZ2VyKG1hcHBlclNlcnZpY2UgfHwgdGhpcy5tYXBwZXJTZXJ2aWNlLFxuICAgICAgaHR0cFNlcnZpY2UgfHwgdGhpcy5odHRwU2VydmljZSwgY29uZmlnLCB0aGlzLnBsYXRmb3JtSWQsIHRoaXMuZGF0ZVBpcGUpO1xuXG4gICAgaWYgKGxvZ01vbml0b3IpIHtcbiAgICAgIGxvZ2dlci5yZWdpc3Rlck1vbml0b3IobG9nTW9uaXRvcik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxvZ2dlcjtcbiAgfVxufVxuXG5cbiJdfQ==