{"version":3,"file":"ngx-logger-testing.umd.js","sources":["ng://ngx-logger/testing/lib/logger.service.mock.ts","ng://ngx-logger/testing/lib/custom-logger.service.mock.ts","ng://ngx-logger/testing/lib/http.service.mock.ts","ng://ngx-logger/testing/lib/mapper.service.mock.ts","ng://ngx-logger/testing/lib/logger-testing.module.ts"],"sourcesContent":["import {HttpHeaders, HttpParams} from '@angular/common/http';\nimport {LoggerConfig, NGXLoggerMonitor} from 'ngx-logger';\n\nexport class NGXLoggerMock {\n\n  constructor() {\n  }\n\n  trace(message: any, ...additional: any[]) {\n  }\n\n  debug(message: any, ...additional: any[]) {\n  }\n\n  info(message: any, ...additional: any[]) {\n  }\n\n  log(message: any, ...additional: any[]) {\n  }\n\n  warn(message: any, ...additional: any[]) {\n  }\n\n  error(message: any, ...additional: any[]) {\n  }\n\n  fatal(message: any, ...additional: any[]) {\n  }\n\n  updateConfig(config: any) {\n\n  }\n\n  setCustomHttpHeaders(headers: HttpHeaders) {\n  }\n\n  setCustomParams(params: HttpParams) {\n  }\n\n  registerMonitor(monitor: NGXLoggerMonitor) {\n  }\n\n  setWithCredentialsOptionValue(withCredentials: boolean) {\n  }\n\n  getConfigSnapshot(): LoggerConfig {\n    return new LoggerConfig();\n  }\n}\n","import {NGXLoggerMock} from './logger.service.mock';\n\n/**\n * CustomNGXLoggerServiceMock is a mock for CustomNGXLoggerService\n */\nexport class CustomNGXLoggerServiceMock {\n\n  constructor() {\n  }\n\n  create(): NGXLoggerMock {\n    // you can inject your own httpService or use the default,\n    return new NGXLoggerMock();\n  }\n}\n\n\n","import {Observable, of} from 'rxjs';\n\nexport class NGXLoggerHttpServiceMock {\n  constructor() {\n\n  }\n\n  logOnServer(url: string, message: string, additional: any[], timestamp: string, logLevel: string): Observable<any> {\n    return of({});\n  }\n}\n","import {Observable, of} from 'rxjs';\n\nexport class NGXMapperServiceMock {\n  constructor() {\n\n  }\n\n  public getCallerDetails(): Observable<{fileName: string, lineNumber: number, columnNumber: number}> {\n    return of({fileName: 'test.ts', lineNumber: 0, columnNumber: 0});\n  }\n}\n","import { NgModule } from '@angular/core';\n\nimport { NGXLoggerMock } from './logger.service.mock';\nimport { NGXLoggerHttpServiceMock } from './http.service.mock';\nimport { CustomNGXLoggerServiceMock } from './custom-logger.service.mock';\nimport { NGXMapperServiceMock } from './mapper.service.mock';\nimport {\n  LoggerModule,\n  NGXLogger,\n  NGXLoggerHttpService,\n  CustomNGXLoggerService,\n  NGXMapperService\n} from 'ngx-logger';\n\n@NgModule({\n  imports: [LoggerModule],\n  providers: [\n    { provide: NGXLogger, useClass: NGXLoggerMock },\n    { provide: NGXLoggerHttpService, useClass: NGXLoggerHttpServiceMock },\n    { provide: CustomNGXLoggerService, useClass: CustomNGXLoggerServiceMock },\n    { provide: NGXMapperService, useClass: NGXMapperServiceMock }\n  ]\n})\nexport class LoggerTestingModule {}\n"],"names":["LoggerConfig","of","NgModule","LoggerModule","NGXLogger","NGXLoggerHttpService","CustomNGXLoggerService","NGXMapperService"],"mappings":";;;;;;;;;;AACA;QAIE;SACC;;;;;;QAED,6BAAK;;;;;QAAL,UAAM,OAAY;YAAE,oBAAoB;iBAApB,UAAoB,EAApB,qBAAoB,EAApB,IAAoB;gBAApB,mCAAoB;;SACvC;;;;;;QAED,6BAAK;;;;;QAAL,UAAM,OAAY;YAAE,oBAAoB;iBAApB,UAAoB,EAApB,qBAAoB,EAApB,IAAoB;gBAApB,mCAAoB;;SACvC;;;;;;QAED,4BAAI;;;;;QAAJ,UAAK,OAAY;YAAE,oBAAoB;iBAApB,UAAoB,EAApB,qBAAoB,EAApB,IAAoB;gBAApB,mCAAoB;;SACtC;;;;;;QAED,2BAAG;;;;;QAAH,UAAI,OAAY;YAAE,oBAAoB;iBAApB,UAAoB,EAApB,qBAAoB,EAApB,IAAoB;gBAApB,mCAAoB;;SACrC;;;;;;QAED,4BAAI;;;;;QAAJ,UAAK,OAAY;YAAE,oBAAoB;iBAApB,UAAoB,EAApB,qBAAoB,EAApB,IAAoB;gBAApB,mCAAoB;;SACtC;;;;;;QAED,6BAAK;;;;;QAAL,UAAM,OAAY;YAAE,oBAAoB;iBAApB,UAAoB,EAApB,qBAAoB,EAApB,IAAoB;gBAApB,mCAAoB;;SACvC;;;;;;QAED,6BAAK;;;;;QAAL,UAAM,OAAY;YAAE,oBAAoB;iBAApB,UAAoB,EAApB,qBAAoB,EAApB,IAAoB;gBAApB,mCAAoB;;SACvC;;;;;QAED,oCAAY;;;;QAAZ,UAAa,MAAW;SAEvB;;;;;QAED,4CAAoB;;;;QAApB,UAAqB,OAAoB;SACxC;;;;;QAED,uCAAe;;;;QAAf,UAAgB,MAAkB;SACjC;;;;;QAED,uCAAe;;;;QAAf,UAAgB,OAAyB;SACxC;;;;;QAED,qDAA6B;;;;QAA7B,UAA8B,eAAwB;SACrD;;;;QAED,yCAAiB;;;QAAjB;YACE,OAAO,IAAIA,sBAAY,EAAE,CAAC;SAC3B;QACH,oBAAC;KAAA;;;;;;IChDD;;;AAKA;;;;QAEE;SACC;;;;QAED,2CAAM;;;QAAN;;YAEE,OAAO,IAAI,aAAa,EAAE,CAAC;SAC5B;QACH,iCAAC;KAAA;;;;;;ACdD;QAGE;SAEC;;;;;;;;;QAED,8CAAW;;;;;;;;QAAX,UAAY,GAAW,EAAE,OAAe,EAAE,UAAiB,EAAE,SAAiB,EAAE,QAAgB;YAC9F,OAAOC,OAAE,CAAC,EAAE,CAAC,CAAC;SACf;QACH,+BAAC;KAAA;;;;;;ACVD;QAGE;SAEC;;;;QAEM,+CAAgB;;;QAAvB;YACE,OAAOA,OAAE,CAAC,EAAC,QAAQ,EAAE,SAAS,EAAE,UAAU,EAAE,CAAC,EAAE,YAAY,EAAE,CAAC,EAAC,CAAC,CAAC;SAClE;QACH,2BAAC;KAAA;;;;;;ACVD;QAcA;SASmC;;oBATlCC,aAAQ,SAAC;wBACR,OAAO,EAAE,CAACC,sBAAY,CAAC;wBACvB,SAAS,EAAE;4BACT,EAAE,OAAO,EAAEC,mBAAS,EAAE,QAAQ,EAAE,aAAa,EAAE;4BAC/C,EAAE,OAAO,EAAEC,8BAAoB,EAAE,QAAQ,EAAE,wBAAwB,EAAE;4BACrE,EAAE,OAAO,EAAEC,gCAAsB,EAAE,QAAQ,EAAE,0BAA0B,EAAE;4BACzE,EAAE,OAAO,EAAEC,0BAAgB,EAAE,QAAQ,EAAE,oBAAoB,EAAE;yBAC9D;qBACF;;QACiC,0BAAC;KATnC;;;;;;;;;;;;;;;;"}