{"version":3,"file":"ngx-logger-testing.js","sources":["ng://ngx-logger/testing/lib/logger.service.mock.ts","ng://ngx-logger/testing/lib/custom-logger.service.mock.ts","ng://ngx-logger/testing/lib/http.service.mock.ts","ng://ngx-logger/testing/lib/mapper.service.mock.ts","ng://ngx-logger/testing/lib/logger-testing.module.ts"],"sourcesContent":["import {HttpHeaders, HttpParams} from '@angular/common/http';\nimport {LoggerConfig, NGXLoggerMonitor} from 'ngx-logger';\n\nexport class NGXLoggerMock {\n\n  constructor() {\n  }\n\n  trace(message: any, ...additional: any[]) {\n  }\n\n  debug(message: any, ...additional: any[]) {\n  }\n\n  info(message: any, ...additional: any[]) {\n  }\n\n  log(message: any, ...additional: any[]) {\n  }\n\n  warn(message: any, ...additional: any[]) {\n  }\n\n  error(message: any, ...additional: any[]) {\n  }\n\n  fatal(message: any, ...additional: any[]) {\n  }\n\n  updateConfig(config: any) {\n\n  }\n\n  setCustomHttpHeaders(headers: HttpHeaders) {\n  }\n\n  setCustomParams(params: HttpParams) {\n  }\n\n  registerMonitor(monitor: NGXLoggerMonitor) {\n  }\n\n  setWithCredentialsOptionValue(withCredentials: boolean) {\n  }\n\n  getConfigSnapshot(): LoggerConfig {\n    return new LoggerConfig();\n  }\n}\n","import {NGXLoggerMock} from './logger.service.mock';\n\n/**\n * CustomNGXLoggerServiceMock is a mock for CustomNGXLoggerService\n */\nexport class CustomNGXLoggerServiceMock {\n\n  constructor() {\n  }\n\n  create(): NGXLoggerMock {\n    // you can inject your own httpService or use the default,\n    return new NGXLoggerMock();\n  }\n}\n\n\n","import {Observable, of} from 'rxjs';\n\nexport class NGXLoggerHttpServiceMock {\n  constructor() {\n\n  }\n\n  logOnServer(url: string, message: string, additional: any[], timestamp: string, logLevel: string): Observable<any> {\n    return of({});\n  }\n}\n","import {Observable, of} from 'rxjs';\n\nexport class NGXMapperServiceMock {\n  constructor() {\n\n  }\n\n  public getCallerDetails(): Observable<{fileName: string, lineNumber: number, columnNumber: number}> {\n    return of({fileName: 'test.ts', lineNumber: 0, columnNumber: 0});\n  }\n}\n","import { NgModule } from '@angular/core';\n\nimport { NGXLoggerMock } from './logger.service.mock';\nimport { NGXLoggerHttpServiceMock } from './http.service.mock';\nimport { CustomNGXLoggerServiceMock } from './custom-logger.service.mock';\nimport { NGXMapperServiceMock } from './mapper.service.mock';\nimport {\n  LoggerModule,\n  NGXLogger,\n  NGXLoggerHttpService,\n  CustomNGXLoggerService,\n  NGXMapperService\n} from 'ngx-logger';\n\n@NgModule({\n  imports: [LoggerModule],\n  providers: [\n    { provide: NGXLogger, useClass: NGXLoggerMock },\n    { provide: NGXLoggerHttpService, useClass: NGXLoggerHttpServiceMock },\n    { provide: CustomNGXLoggerService, useClass: CustomNGXLoggerServiceMock },\n    { provide: NGXMapperService, useClass: NGXMapperServiceMock }\n  ]\n})\nexport class LoggerTestingModule {}\n"],"names":[],"mappings":";;;;;;;;AACA,MAEa,aAAa;IAExB;KACC;;;;;;IAED,KAAK,CAAC,OAAY,EAAE,GAAG,UAAiB;KACvC;;;;;;IAED,KAAK,CAAC,OAAY,EAAE,GAAG,UAAiB;KACvC;;;;;;IAED,IAAI,CAAC,OAAY,EAAE,GAAG,UAAiB;KACtC;;;;;;IAED,GAAG,CAAC,OAAY,EAAE,GAAG,UAAiB;KACrC;;;;;;IAED,IAAI,CAAC,OAAY,EAAE,GAAG,UAAiB;KACtC;;;;;;IAED,KAAK,CAAC,OAAY,EAAE,GAAG,UAAiB;KACvC;;;;;;IAED,KAAK,CAAC,OAAY,EAAE,GAAG,UAAiB;KACvC;;;;;IAED,YAAY,CAAC,MAAW;KAEvB;;;;;IAED,oBAAoB,CAAC,OAAoB;KACxC;;;;;IAED,eAAe,CAAC,MAAkB;KACjC;;;;;IAED,eAAe,CAAC,OAAyB;KACxC;;;;;IAED,6BAA6B,CAAC,eAAwB;KACrD;;;;IAED,iBAAiB;QACf,OAAO,IAAI,YAAY,EAAE,CAAC;KAC3B;CACF;;;;;;AChDD;;;AAKA,MAAa,0BAA0B;IAErC;KACC;;;;IAED,MAAM;;QAEJ,OAAO,IAAI,aAAa,EAAE,CAAC;KAC5B;CACF;;;;;;ACdD,MAEa,wBAAwB;IACnC;KAEC;;;;;;;;;IAED,WAAW,CAAC,GAAW,EAAE,OAAe,EAAE,UAAiB,EAAE,SAAiB,EAAE,QAAgB;QAC9F,OAAO,EAAE,CAAC,EAAE,CAAC,CAAC;KACf;CACF;;;;;;ACVD,MAEa,oBAAoB;IAC/B;KAEC;;;;IAEM,gBAAgB;QACrB,OAAO,EAAE,CAAC,EAAC,QAAQ,EAAE,SAAS,EAAE,UAAU,EAAE,CAAC,EAAE,YAAY,EAAE,CAAC,EAAC,CAAC,CAAC;KAClE;CACF;;;;;;ACVD,MAuBa,mBAAmB;;;YAT/B,QAAQ,SAAC;gBACR,OAAO,EAAE,CAAC,YAAY,CAAC;gBACvB,SAAS,EAAE;oBACT,EAAE,OAAO,EAAE,SAAS,EAAE,QAAQ,EAAE,aAAa,EAAE;oBAC/C,EAAE,OAAO,EAAE,oBAAoB,EAAE,QAAQ,EAAE,wBAAwB,EAAE;oBACrE,EAAE,OAAO,EAAE,sBAAsB,EAAE,QAAQ,EAAE,0BAA0B,EAAE;oBACzE,EAAE,OAAO,EAAE,gBAAgB,EAAE,QAAQ,EAAE,oBAAoB,EAAE;iBAC9D;aACF;;;;;"}